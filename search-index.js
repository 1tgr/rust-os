var searchIndex = {};
searchIndex['syscall'] = {"items":[[0,"","syscall","",null,null],[4,"ErrNum","","",null,null],[13,"Utf8Error","","",0,null],[13,"OutOfMemory","","",0,null],[13,"InvalidHandle","","",0,null],[13,"NotSupported","","",0,null],[13,"FileNotFound","","",0,null],[13,"InvalidArgument","","",0,null],[5,"syscall","","",null,{"inputs":[{"name":"u32"},{"name":"t"}],"output":{"name":"result"}}],[5,"exit_thread","","Exits the current thread.",null,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[5,"alloc_pages","","Allocates memory.",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"free_pages","","Frees memory allocated by `alloc_pages`.",null,null],[5,"open","","Opens a file.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"close","","Closes a handle.",null,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[5,"write","","Writes to a file.",null,null],[5,"read","","Reads from a file.",null,null],[5,"init_video_mode","","",null,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[5,"spawn","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"wait_for_exit","","",null,{"inputs":[{"name":"processhandle"}],"output":{"name":"result"}}],[0,"libc_helpers","","",null,null],[5,"__errno","syscall::libc_helpers","",null,null],[5,"sbrk","","",null,null],[5,"__assert_fail","","",null,null],[5,"__stack_chk_fail","","",null,{"inputs":[],"output":null}],[5,"_fputwc_r","","",null,null],[5,"_exit","","",null,{"inputs":[{"name":"c_int"}],"output":null}],[5,"kill","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"c_int"}}],[5,"write","","",null,null],[5,"close","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"fstat","","",null,null],[5,"isatty","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"lseek","","",null,{"inputs":[{"name":"c_int"},{"name":"off_t"},{"name":"c_int"}],"output":{"name":"off_t"}}],[5,"read","","",null,null],[5,"open","","",null,null],[5,"unlink","","",null,null],[5,"start","","",null,{"inputs":[],"output":null}],[7,"stdin","","",null,null],[7,"stdout","","",null,null],[0,"unwind","syscall","",null,null],[3,"_Unwind_Context","syscall::unwind","",null,null],[3,"_Unwind_Exception","","",null,null],[4,"_Unwind_Reason_Code","","",null,null],[13,"_URC_NO_REASON","","",1,null],[13,"_URC_FOREIGN_EXCEPTION_CAUGHT","","",1,null],[13,"_URC_FATAL_PHASE2_ERROR","","",1,null],[13,"_URC_FATAL_PHASE1_ERROR","","",1,null],[13,"_URC_NORMAL_STOP","","",1,null],[13,"_URC_END_OF_STACK","","",1,null],[13,"_URC_HANDLER_FOUND","","",1,null],[13,"_URC_INSTALL_CONTEXT","","",1,null],[13,"_URC_CONTINUE_UNWIND","","",1,null],[5,"rust_begin_unwind","","",null,{"inputs":[{"name":"arguments"},{"name":"str"},{"name":"u32"}],"output":null}],[5,"__morestack","","",null,{"inputs":[],"output":null}],[5,"rust_eh_personality","","",null,{"inputs":[{"name":"isize"},{"name":"_unwind_action"},{"name":"u64"},{"name":"_unwind_exception"},{"name":"_unwind_context"}],"output":{"name":"_unwind_reason_code"}}],[5,"_Unwind_Resume","","",null,{"inputs":[],"output":null}],[6,"_Unwind_Action","","",null,null],[6,"Handle","syscall","",null,null],[6,"FileHandle","","",null,null],[6,"ProcessHandle","","",null,null],[6,"Result","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"errnum"},{"name":"errnum"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"errnum"},{"name":"errnum"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"errnum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_result","","",2,{"inputs":[{"name":"result"}],"output":{"name":"isize"}}],[11,"from_result","","",2,{"inputs":[{"name":"result"},{"name":"isize"}],"output":{"name":"result"}}],[11,"clone","syscall::unwind","",1,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"clone","","",3,{"inputs":[{"name":"_unwind_context"}],"output":{"name":"_unwind_context"}}],[11,"clone","","",4,{"inputs":[{"name":"_unwind_exception"}],"output":{"name":"_unwind_exception"}}]],"paths":[[4,"ErrNum"],[4,"_Unwind_Reason_Code"],[6,"Result"],[3,"_Unwind_Context"],[3,"_Unwind_Exception"]]};
searchIndex['std'] = {"items":[[0,"","std","",null,null],[0,"cmp","","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",0,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",0,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"reverse","core::cmp","Reverse the `Ordering`.",1,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"default","core::num","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",2,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",2,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",2,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",2,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",3,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",5,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",5,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",5,null],[11,"clone","","",6,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",6,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",6,null],[11,"fmt","","",7,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",8,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",8,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",9,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,null],[11,"eq","","",11,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",13,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",14,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",14,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",14,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",14,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",14,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",14,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",14,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",14,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",14,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",14,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",14,null],[11,"eq","","",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",14,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",15,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",15,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",15,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",15,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",15,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",15,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",15,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",15,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",15,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",15,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",15,null],[11,"eq","","",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",15,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",15,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",16,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",16,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",16,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",16,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",17,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",18,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",18,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",19,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",20,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",20,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",21,null],[11,"get","","Dereferences the content.",21,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",21,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",22,null],[11,"clone","","",22,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",23,null],[11,"eq","","",23,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",23,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",23,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",23,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",24,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",24,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",25,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",26,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",27,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",1,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",1,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","std","",28,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",28,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",29,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",30,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",31,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",32,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",33,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",34,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",30,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",30,null],[11,"swap","","Stores a value into the bool, returning the old value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",31,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",31,null],[11,"swap","","Stores a value into the isize, returning the old value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",32,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",32,null],[11,"swap","","Stores a value into the usize, returning the old value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",33,null],[11,"load","","Loads a value from the pointer.",33,null],[11,"store","","Stores a value into the pointer.",33,null],[11,"swap","","Stores a value into the pointer, returning the old value.",33,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"fmt","","",32,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",35,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",35,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",35,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",35,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",35,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",35,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",35,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",37,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",37,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",37,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",39,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",39,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",39,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",39,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",40,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",40,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",41,null],[11,"deref","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",42,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",42,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",42,null],[11,"clone","core::char","",43,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",44,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",43,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"clone","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",46,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"clone","core::iter","",47,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",47,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",49,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",51,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",50,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",53,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"nth","","",56,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",57,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",57,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",58,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",59,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",60,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",61,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",61,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",62,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",64,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",26,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",25,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"clone","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next","core::ops","",25,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"next_back","","",25,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",70,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",70,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",70,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",71,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",71,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",71,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",71,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",71,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",71,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",71,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",71,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",71,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",71,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",71,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",71,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",71,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",71,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",71,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",71,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",71,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",71,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",71,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",71,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",71,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",71,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",71,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",71,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",71,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",72,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",72,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",71,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",76,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",77,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",78,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",78,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",78,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",78,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",78,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",78,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",78,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",78,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",78,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",78,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",78,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",78,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",78,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",78,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",78,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",78,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",78,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",78,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",78,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",78,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",78,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",80,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",78,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",82,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",83,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",84,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",85,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",86,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",87,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",88,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",89,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",90,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",91,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",86,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",87,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",88,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",89,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",82,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",83,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",84,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",85,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",90,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",91,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",86,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",87,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",88,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",89,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",82,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",83,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",84,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",85,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",90,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",91,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",86,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",87,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",88,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",89,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",82,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",83,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",84,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",85,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",90,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",91,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",90,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",91,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",86,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",87,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",88,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",89,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",82,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",83,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",84,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",85,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",86,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",87,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",88,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",89,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",82,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",83,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",84,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",85,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",86,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",87,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",88,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",89,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",82,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",83,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",84,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",85,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",86,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",87,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",88,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",89,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",82,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",83,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",84,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",85,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",86,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",87,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",88,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",89,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",82,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",83,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",84,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",85,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",92,null],[11,"next","","",92,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"count","","",92,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",92,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",92,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",92,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",92,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",93,null],[11,"next","","",93,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",93,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",93,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",93,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",94,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",94,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",95,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next","","",97,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next","","",98,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next","","",99,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next","","",100,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"clone","","",101,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",101,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"count","","",101,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",101,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",102,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"count","","",102,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",102,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",102,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",102,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"count","","",103,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",103,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",103,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",103,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",104,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",105,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",106,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",105,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",105,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",105,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",107,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",107,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",107,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",107,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",107,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",107,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",107,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",107,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",108,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",108,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",108,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",108,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",108,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",108,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",108,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",109,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",109,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",109,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",109,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",109,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",109,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",110,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",111,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",112,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",110,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",110,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",110,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",110,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",110,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",113,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",114,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",114,null],[11,"matching","","",114,null],[11,"use_early_reject","","",115,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",115,null],[11,"matching","","",115,null],[11,"eq","core::str","",116,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",116,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",117,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",117,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",117,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",118,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",118,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",119,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",119,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",119,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",120,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",120,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"count","","",120,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",120,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",120,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",120,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",121,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",122,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",123,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",122,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",125,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",124,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",125,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",127,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",128,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",129,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",130,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",131,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",130,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",133,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",134,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",133,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",134,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",135,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",137,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",137,null],[11,"call_mut","","",137,null],[11,"call_once","","",137,null],[11,"next","","",136,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",139,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",139,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",139,null],[11,"finish","","",139,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",139,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",139,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",140,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",141,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",142,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",143,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",144,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",145,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",146,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",147,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",148,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",148,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",149,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",149,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",149,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",150,null],[11,"entry","","Adds a new entry to the set output.",151,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",151,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",151,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",152,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",152,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",152,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",153,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",153,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",153,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",154,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",155,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",156,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",157,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",158,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",159,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",160,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",161,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",161,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",162,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",162,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",162,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",162,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",162,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",162,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",162,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",162,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",162,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",162,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",162,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",162,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",162,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",162,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",162,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",162,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",162,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",162,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",162,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",162,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",162,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",23,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",35,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","std::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",1,null],[13,"Equal","","An ordering where a compared value is equal [to another].",1,null],[13,"Greater","","An ordering where a compared value is greater [than another].",1,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",163,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"ops","std","Overloadable operators",null,null],[8,"Drop","std::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",165,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",166,null],[10,"add","","The method for the `+` operator",166,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",167,null],[10,"sub","","The method for the `-` operator",167,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",168,null],[10,"mul","","The method for the `*` operator",168,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",169,null],[10,"div","","The method for the `/` operator",169,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",170,null],[10,"rem","","The method for the `%` operator",170,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",171,null],[10,"neg","","The method for the unary `-` operator",171,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",172,null],[10,"not","","The method for the unary `!` operator",172,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator",173,null],[10,"bitand","","The method for the `&` operator",173,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",174,null],[10,"bitor","","The method for the `|` operator",174,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",175,null],[10,"bitxor","","The method for the `^` operator",175,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`.",null,null],[16,"Output","","The resulting type after applying the `<<` operator",176,null],[10,"shl","","The method for the `<<` operator",176,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`.",null,null],[16,"Output","","The resulting type after applying the `>>` operator",177,null],[10,"shr","","The method for the `>>` operator",177,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",178,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",179,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",180,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",181,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",182,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&=`.",null,null],[10,"bitand_assign","","The method for the `&` operator",183,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",184,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",185,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `<<=`.",null,null],[10,"shl_assign","","The method for the `<<=` operator",186,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `>>=`.",null,null],[10,"shr_assign","","The method for the `>>=` operator",187,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",188,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",188,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",189,null],[3,"RangeFull","","An unbounded range.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends.",null,null],[12,"start","","The lower bound of the range (inclusive).",25,null],[12,"end","","The upper bound of the range (exclusive).",25,null],[3,"RangeFrom","","A range which is only bounded below.",null,null],[12,"start","","The lower bound of the range (inclusive).",26,null],[3,"RangeTo","","A range which is only bounded above.",null,null],[12,"end","","The upper bound of the range (exclusive).",27,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",190,null],[10,"deref","","The method called to dereference a value",190,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",191,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",192,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",193,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",194,null],[10,"call_once","","This is called when the call operator is used.",194,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate \"place\" that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",195,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",196,null],[10,"make_place","","Creates a fresh place from `self`.",196,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",197,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",197,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",198,null],[16,"Place","","The place that will negotiate the storage of the data.",198,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",198,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",199,{"inputs":[{"name":"boxplace"}],"output":{"name":"self"}}],[0,"iter","std","Composable external iteration",null,null],[8,"Iterator","std::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",200,null],[10,"next","","Advances the iterator and returns the next value.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",200,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",200,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",200,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",200,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",200,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",200,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator similar to `fold()`, with internal state.",200,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",200,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",200,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value from the\nspecified function.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value from the\nspecified function.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",200,null],[11,"cloned","","Creates an iterator which clone()s all of its elements.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",200,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Builds a container with elements from something iterable.",201,{"inputs":[{"name":"fromiterator"},{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",202,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",202,null],[10,"into_iter","","Consumes `Self` and returns an iterator over it.",202,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",203,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",204,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",205,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[3,"Rev","","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",206,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",206,{"inputs":[{"name":"step"},{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Returns an iterator over the range [start, stop].",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[0,"order","","Functions for lexicographical ordering of sequences.",null,null],[5,"equals","std::iter::order","Compare `a` and `b` for equality using `Eq`",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[5,"cmp","","Order `a` and `b` lexicographically using `Ord`",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[5,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"option"}}],[5,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[5,"ne","","Compares `a` and `b` for nonequality (Using partial equality, `PartialEq`)",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[5,"lt","","Returns `a` < `b` lexicographically (Using partial order, `PartialOrd`)",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[5,"le","","Returns `a` <= `b` lexicographically (Using partial order, `PartialOrd`)",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[5,"gt","","Returns `a` > `b` lexicographically (Using partial order, `PartialOrd`)",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[5,"ge","","Returns `a` >= `b` lexicographically (Using partial order, `PartialOrd`)",null,{"inputs":[{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[0,"option","std","Optional values",null,null],[4,"Option","std::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",71,null],[13,"Some","","Some value `T`",71,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"marker","std","Primitive traits and marker types representing basic 'kinds' of types.",null,null],[8,"Send","std::marker","Types able to be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData<T>` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","A marker trait indicates a type that can be reflected over. This\ntrait is implemented for all types. Its purpose is to ensure that\nwhen you write a generic function that will employ reflection,\nthat must be reflected (no pun intended) in the generic bounds of\nthat function. Here is an example:",null,null],[0,"any","std","This module implements the `Any` trait, which enables dynamic typing\nof any `'static` type through runtime reflection.",null,null],[8,"Any","std::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",28,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"char","std","Character manipulation.",null,null],[17,"MAX","std::char","The highest valid code point",null,null],[5,"from_u32","","Converts a `u32` to an `Option<char>`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to an `char`, not checking whether it is a valid unicode\ncodepoint.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a number to the character representing it.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeUnicode","","An iterator over the characters that represent a `char`, as escaped by\nRust's unicode escaping rules.",null,null],[3,"EscapeDefault","","An iterator over the characters that represent a `char`, escaped\nfor maximum portability.",null,null],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'",null,null],[8,"Clone","std::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",207,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",207,null],[0,"convert","std","Traits for conversions between types.",null,null],[8,"AsRef","std::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",208,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",209,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",210,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",211,{"inputs":[{"name":"from"},{"name":"t"}],"output":{"name":"self"}}],[0,"default","std","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",212,{"inputs":[{"name":"default"}],"output":{"name":"self"}}],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",213,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",213,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",214,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",214,null],[11,"write_u8","","Write a single `u8` into this hasher",214,null],[11,"write_u16","","Write a single `u16` into this hasher.",214,null],[11,"write_u32","","Write a single `u32` into this hasher.",214,null],[11,"write_u64","","Write a single `u64` into this hasher.",214,null],[11,"write_usize","","Write a single `usize` into this hasher.",214,null],[11,"write_i8","","Write a single `i8` into this hasher.",214,null],[11,"write_i16","","Write a single `i16` into this hasher.",214,null],[11,"write_i32","","Write a single `i32` into this hasher.",214,null],[11,"write_i64","","Write a single `i64` into this hasher.",214,null],[11,"write_isize","","Write a single `isize` into this hasher.",214,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"intrinsics","std","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ctpop8","","Returns the number of bits set in a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"ctpop16","","Returns the number of bits set in a `u16`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"ctpop32","","Returns the number of bits set in a `u32`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ctpop64","","Returns the number of bits set in a `u64`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"ctlz8","","Returns the number of leading bits unset in a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"ctlz16","","Returns the number of leading bits unset in a `u16`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"ctlz32","","Returns the number of leading bits unset in a `u32`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ctlz64","","Returns the number of leading bits unset in a `u64`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"cttz8","","Returns the number of trailing bits unset in a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"cttz16","","Returns the number of trailing bits unset in a `u16`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"cttz32","","Returns the number of trailing bits unset in a `u32`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"cttz64","","Returns the number of trailing bits unset in a `u64`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"bswap16","","Reverses the bytes in a `u16`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"bswap32","","Reverses the bytes in a `u32`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"bswap64","","Reverses the bytes in a `u64`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"i8_add_with_overflow","","Performs checked `i8` addition.",null,null],[5,"i16_add_with_overflow","","Performs checked `i16` addition.",null,null],[5,"i32_add_with_overflow","","Performs checked `i32` addition.",null,null],[5,"i64_add_with_overflow","","Performs checked `i64` addition.",null,null],[5,"u8_add_with_overflow","","Performs checked `u8` addition.",null,null],[5,"u16_add_with_overflow","","Performs checked `u16` addition.",null,null],[5,"u32_add_with_overflow","","Performs checked `u32` addition.",null,null],[5,"u64_add_with_overflow","","Performs checked `u64` addition.",null,null],[5,"i8_sub_with_overflow","","Performs checked `i8` subtraction.",null,null],[5,"i16_sub_with_overflow","","Performs checked `i16` subtraction.",null,null],[5,"i32_sub_with_overflow","","Performs checked `i32` subtraction.",null,null],[5,"i64_sub_with_overflow","","Performs checked `i64` subtraction.",null,null],[5,"u8_sub_with_overflow","","Performs checked `u8` subtraction.",null,null],[5,"u16_sub_with_overflow","","Performs checked `u16` subtraction.",null,null],[5,"u32_sub_with_overflow","","Performs checked `u32` subtraction.",null,null],[5,"u64_sub_with_overflow","","Performs checked `u64` subtraction.",null,null],[5,"i8_mul_with_overflow","","Performs checked `i8` multiplication.",null,null],[5,"i16_mul_with_overflow","","Performs checked `i16` multiplication.",null,null],[5,"i32_mul_with_overflow","","Performs checked `i32` multiplication.",null,null],[5,"i64_mul_with_overflow","","Performs checked `i64` multiplication.",null,null],[5,"u8_mul_with_overflow","","Performs checked `u8` multiplication.",null,null],[5,"u16_mul_with_overflow","","Performs checked `u16` multiplication.",null,null],[5,"u32_mul_with_overflow","","Performs checked `u32` multiplication.",null,null],[5,"u64_mul_with_overflow","","Performs checked `u64` multiplication.",null,null],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of N in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of N in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of N in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_sdiv","","Performs an unchecked signed division, which results in undefined behavior,\nin cases where y == 0, or x == isize::MIN and y == -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_udiv","","Performs an unchecked unsigned division, which results in undefined behavior,\nin cases where y == 0",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_srem","","Returns the remainder of an unchecked signed division, which results in\nundefined behavior, in cases where y == 0, or x == isize::MIN and y == -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_urem","","Returns the remainder of an unchecked unsigned division, which results in\nundefined behavior, in cases where y == 0",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in 'v',\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust's \"try catch\" construct which invokes the function pointer `f` with\nthe data pointer `data`, returning the exception payload if an exception\nis thrown (aka the thread panics).",null,null],[0,"mem","std","Basic functions for dealing with memory",null,null],[5,"forget","std::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the type that `val` points to in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"panicking","std","Panic support for libcore",null,null],[5,"panic","std::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"ptr","std","Raw, unsafe pointers, `*const T`, and `*mut T`",null,null],[5,"null","std::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","Variant of read_and_zero that writes the specific drop-flag byte\n(which may be more appropriate than zero).",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[3,"Unique","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc<T>` or `Arc<T>`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","std::raw","The representation of a slice like `&[T]`.",null,null],[12,"data","","",76,null],[12,"len","","",76,null],[3,"TraitObject","","The representation of a trait object like `&SomeTrait`.",null,null],[12,"data","","",77,null],[12,"vtable","","",77,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",215,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"result","std","Error handling with the `Result` type",null,null],[4,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",78,null],[13,"Err","","Contains the error value",78,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"slice","std","Slice management and manipulation",null,null],[3,"Iter","std::slice","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[5,"ref_slice","","Converts a reference to A into a slice of length 1 (without copying).",null,null],[5,"mut_ref_slice","","Converts a reference to A into a slice of length 1 (without copying).",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"bytes","","Operations on `[u8]`.",null,null],[8,"MutableByteVector","std::slice::bytes","A trait for operations on mutable `[u8]`s.",null,null],[10,"set_memory","","Sets all bytes of the receiver to the given value.",216,null],[5,"copy_memory","","Copies data from `src` to `dst`",null,null],[0,"str","std","String manipulation",null,null],[0,"pattern","std::str","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",217,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",217,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",217,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",217,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",217,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",104,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",104,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",104,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",218,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",218,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",218,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",218,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",219,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",219,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",219,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[8,"FromStr","std::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",220,null],[10,"from_str","","Parses a string `s` to return a value of this type.",220,{"inputs":[{"name":"fromstr"},{"name":"str"}],"output":{"name":"result"}}],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[3,"CharIndices","","Iterator for a string's characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module.",null,null],[3,"Split","","Created with the method `.split()`.",null,null],[3,"RSplit","","Created with the method `.rsplit()`.",null,null],[3,"SplitTerminator","","Created with the method `.split_terminator()`.",null,null],[3,"RSplitTerminator","","Created with the method `.rsplit_terminator()`.",null,null],[3,"SplitN","","Created with the method `.splitn()`.",null,null],[3,"RSplitN","","Created with the method `.rsplitn()`.",null,null],[3,"MatchIndices","","Created with the method `.match_indices()`.",null,null],[3,"RMatchIndices","","Created with the method `.rmatch_indices()`.",null,null],[3,"Matches","","Created with the method `.matches()`.",null,null],[3,"RMatches","","Created with the method `.rmatches()`.",null,null],[3,"Lines","","Created with the method `.lines()`.",null,null],[3,"LinesAny","","Created with the method `.lines_any()`.",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",138,null],[12,"next","","Index of the first byte of the next `char`",138,null],[0,"fmt","std","Utilities for formatting and printing strings",null,null],[5,"format","std::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",221,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",222,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",222,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",222,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",223,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",224,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",225,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",226,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",227,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",228,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",229,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",230,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Radix","","A radix with in the range of `2..36`.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[0,"string","std","An owned, growable string that enforces that its contents are valid UTF-8.",null,null],[11,"new","core_collections::string","Creates a new string buffer initialized with the empty string.",231,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",231,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",231,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",231,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",231,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",231,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",231,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",231,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",231,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",231,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",231,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",231,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",231,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",231,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",231,null],[11,"push","","Adds the given character to the end of the string.",231,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",231,null],[11,"truncate","","Shortens a string to the specified length.",231,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",231,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",231,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",231,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",231,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",231,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",231,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",231,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",231,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",231,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",231,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"clone","core_collections::binary_heap","",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",232,null],[11,"default","","",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",232,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",232,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",232,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",232,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",232,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",232,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",232,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",232,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",232,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",232,null],[11,"drop","","",233,null],[11,"clone","","",234,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",234,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"next_back","","",234,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",235,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"next_back","","",235,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",236,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"next_back","","",236,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",232,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","core_collections::vec","",237,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","core_collections::binary_heap","",232,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",232,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",232,null],[11,"extend","","",232,null],[11,"next","core_collections::btree::node","",238,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",238,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",238,null],[11,"drop","","",239,null],[11,"as_slices","","",239,null],[11,"as_slices_mut","","",239,null],[11,"as_slices_internal","","",239,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",239,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",239,null],[11,"keys_mut","","",239,null],[11,"vals","","",239,null],[11,"vals_mut","","",239,null],[11,"edges","","",239,null],[11,"edges_mut","","",239,null],[11,"clone","","",239,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",240,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",239,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",239,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",239,null],[11,"len","","How many key-value pairs the node contains",239,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",239,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",239,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",239,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",239,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",239,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",240,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",240,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",240,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",240,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",240,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",240,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",240,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",240,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",240,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",240,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favor handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",240,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",240,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",240,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",240,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",240,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",240,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",240,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",240,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",240,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",239,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",239,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",239,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",239,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",239,null],[11,"clone","","",241,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",241,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",241,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",241,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",241,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",242,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",242,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",242,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",242,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",242,null],[11,"clone","","",243,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",243,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",243,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",243,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",243,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",243,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",243,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",244,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",244,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",244,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",245,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",245,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",245,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","core_collections::btree::map","",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",247,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",246,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",246,null],[11,"get","","Returns a reference to the value corresponding to the key.",246,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",246,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",246,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",246,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",246,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","core_collections::btree::map::stack","",248,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",248,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",249,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",249,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",250,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",250,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",251,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",251,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",251,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",251,null],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",251,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","core_collections::btree::map","",246,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",246,null],[11,"extend","","",246,null],[11,"hash","","",246,null],[11,"default","","",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",246,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",246,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",246,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",246,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",246,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","core_collections::btree::node","",243,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",243,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",243,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","core_collections::btree::map","",247,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"next_back","","",247,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",252,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",252,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",252,null],[11,"next_back","","",252,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",253,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",253,null],[11,"next_back","","",253,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",254,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",254,null],[11,"next_back","","",254,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",255,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",255,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",255,null],[11,"next_back","","",255,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",256,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",256,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",256,null],[11,"next_back","","",256,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",257,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",257,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",257,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",258,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",258,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",259,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",259,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",260,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",261,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",261,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",261,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",261,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",261,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",246,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",246,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",246,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",246,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","core_collections::btree::set","",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",262,null],[11,"clone","","",262,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",262,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",262,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",262,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",262,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",262,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",262,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",262,null],[11,"contains","","Returns `true` if the set contains a value.",262,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",262,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",262,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",262,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",262,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",262,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",262,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",262,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",262,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",262,null],[11,"extend","","",262,null],[11,"default","","",262,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",262,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",263,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",263,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[11,"next_back","","",263,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",264,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"next_back","","",264,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",265,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",265,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",265,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",266,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",266,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",267,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",267,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",268,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",268,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",269,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",269,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","core_collections::borrow","",270,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",270,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",270,null],[11,"into_owned","","Extracts the owned data.",270,null],[11,"deref","","",270,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",270,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",270,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",270,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",270,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",270,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",270,null],[11,"into_cow","","",270,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",270,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","core_collections::enum_set","",271,null],[11,"cmp","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",271,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",271,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",271,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",271,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",271,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",271,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",271,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",271,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",271,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",271,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",271,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",272,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",272,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",272,null],[11,"from_iter","","",271,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",271,null],[11,"extend","","",271,null],[11,"clone","core_collections::linked_list","",273,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",274,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",275,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",275,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",276,null],[11,"iter","","Provides a forward iterator.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",276,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",276,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",276,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",276,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",276,null],[11,"next","","",273,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",273,null],[11,"next_back","","",273,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",277,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",277,null],[11,"next_back","","",277,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",277,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",277,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",274,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",274,null],[11,"next_back","","",274,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",276,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",276,null],[11,"extend","","",276,null],[11,"eq","","",276,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",276,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",276,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",276,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",276,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",276,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",276,null],[11,"start","std::ops","",26,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",27,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",25,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",25,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","core_collections::vec","",237,null],[11,"borrow_mut","","",237,null],[11,"clone","core_collections::str","",278,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",278,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"borrow","core_collections::string","",231,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"cmp","","",231,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",231,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",231,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",231,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",231,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",279,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",280,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",279,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",279,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",279,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",280,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",231,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",231,null],[11,"from_iter","","",231,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",231,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",231,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",231,null],[11,"extend","","",231,null],[11,"extend","","",231,null],[11,"extend","","",231,null],[11,"eq","","",231,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",231,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",231,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","core_collections::borrow","",270,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",270,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",270,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",270,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","core_collections::string","",231,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","core_collections::borrow","",270,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",270,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","core_collections::string","",231,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",231,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",231,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",231,null],[11,"add","","",231,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",231,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",231,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",231,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",231,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",231,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",231,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",231,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",231,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",231,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",231,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",231,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",281,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",281,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",281,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",231,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",231,null],[11,"from","","",231,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","core_collections::borrow","",270,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",270,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","core_collections::string","",231,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",231,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",231,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",231,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",282,null],[11,"next","","",282,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",282,null],[11,"next_back","","",282,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","core_collections::vec","Constructs a new, empty `Vec<T>`.",237,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",237,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",237,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",237,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",237,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",237,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",237,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",237,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",237,null],[11,"as_slice","","Extracts a slice containing the entire vector.",237,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",237,null],[11,"set_len","","Sets the length of a vector.",237,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",237,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",237,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",237,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",237,null],[11,"push","","Appends an element to the back of a collection.",237,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",237,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",237,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",237,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",237,null],[11,"len","","Returns the number of elements in the vector.",237,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",237,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",237,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",237,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",237,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",237,null],[11,"clone","","",237,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",237,null],[11,"hash","","",237,null],[11,"index","","",237,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",237,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",237,null],[11,"index","","",237,null],[11,"index","","",237,null],[11,"index","","",237,null],[11,"index_mut","","",237,null],[11,"index_mut","","",237,null],[11,"index_mut","","",237,null],[11,"index_mut","","",237,null],[11,"deref","","",237,null],[11,"deref_mut","","",237,null],[11,"from_iter","","",237,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",237,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",237,null],[11,"extend","","",237,null],[11,"eq","","",237,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","core_collections::borrow","",270,null],[11,"ne","","",270,null],[11,"eq","","",270,null],[11,"ne","","",270,null],[11,"eq","","",270,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",270,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","core_collections::vec","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"partial_cmp","","",237,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",237,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",237,null],[11,"default","","",237,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",237,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",237,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",237,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",237,null],[11,"as_mut","","",237,null],[11,"from","","",237,null],[11,"from","","",237,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","core_collections::borrow","",270,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","core_collections::vec","",237,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",283,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",283,null],[11,"count","","",283,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",283,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",283,null],[11,"next","","",284,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",284,null],[11,"next_back","","",284,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",284,null],[11,"clone","core_collections::vec_deque","",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",285,null],[11,"default","","",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",285,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",285,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",285,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",285,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",285,null],[11,"iter","","Returns a front-to-back iterator.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",285,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",285,null],[11,"len","","Returns the number of elements in the `VecDeque`.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items from start to end. The element\nrange is removed even if the iterator is not consumed until the end.",285,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",285,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",285,null],[11,"push_back","","Appends an element to the back of a buffer",285,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_back_remove","","deprecated",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","deprecated",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",285,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",285,null],[11,"retain","","Retains only the elements specified by the predicate.",285,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",285,null],[11,"clone","","",286,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",286,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"next_back","","",286,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",287,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",287,null],[11,"next_back","","",287,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",288,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",288,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",288,null],[11,"next_back","","",288,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",289,null],[11,"next","","",289,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",289,null],[11,"next_back","","",289,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",285,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",285,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",285,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",285,null],[11,"index","","",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",285,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",285,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",285,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",285,null],[11,"extend","","",285,null],[11,"fmt","","",285,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core_collections","",290,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",290,null],[11,"fmt","","",290,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",290,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",291,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",292,null],[11,"make_place","","",292,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",292,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",293,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",291,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",292,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",293,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",293,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",293,null],[11,"default","","",293,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",293,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",293,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",293,null],[11,"clone","","",293,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",293,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",293,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",293,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",293,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",293,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",293,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",293,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",293,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",293,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",293,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",293,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",293,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",293,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",293,null],[11,"next_back","","",293,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",293,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",293,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",293,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",293,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",293,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",293,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",293,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[3,"String","std::string","A growable string stored as a UTF-8 encoded buffer.",null,null],[3,"FromUtf8Error","","A possible error value from the `String::from_utf8` function.",null,null],[3,"FromUtf16Error","","A possible error value from the `String::from_utf16` function.",null,null],[4,"ParseError","","Error returned from `String::from`",null,null],[8,"ToString","","A generic trait for converting a value to a string",null,null],[10,"to_string","","Converts the value of `self` to an owned string",294,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","std","A growable list type with heap-allocated contents, written `Vec<T>` but\npronounced 'vector.'",null,null],[3,"Vec","std::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"BITS","std::isize","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"BITS","std::i8","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"BITS","std::i16","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"BITS","std::i32","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"BITS","std::i64","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"BITS","std::usize","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"BITS","std::u8","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"BITS","std::u16","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"BITS","std::u32","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"BITS","std::u64","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"prelude","std","",null,null],[0,"v1","std::prelude","",null,null],[11,"fmt","alloc::arc","",295,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",296,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",296,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",296,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_unique","","",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc<T>`.",296,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",295,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",295,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",295,null],[11,"eq","","Equality for two `Arc<T>`s.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",296,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",296,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",296,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",296,null],[11,"borrow","","",296,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"as_ref","","",296,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",297,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",297,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",297,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",297,null],[11,"clone","","Makes a clone of the `Rc<T>`.",297,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",297,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",297,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",297,null],[11,"fmt","","",297,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",298,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",298,null],[11,"clone","","Makes a clone of the `Weak<T>`.",298,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",298,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",297,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",297,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",299,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",299,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",299,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",299,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",299,null],[11,"cap","","Gets the capacity of the allocation.",299,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",299,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",299,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",299,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",299,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",299,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",299,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",299,null],[3,"Box","std::prelude::v1","A pointer type for heap allocation.",null,null],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",207,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",207,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",0,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",0,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",164,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",163,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",208,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",209,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",210,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",211,{"inputs":[{"name":"from"},{"name":"t"}],"output":{"name":"self"}}],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",212,{"inputs":[{"name":"default"}],"output":{"name":"self"}}],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",204,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",205,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",200,null],[10,"next","","Advances the iterator and returns the next value.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",200,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",200,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",200,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",200,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",200,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",200,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator similar to `fold()`, with internal state.",200,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",200,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",200,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",200,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by","","Returns the element that gives the maximum value from the\nspecified function.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","Returns the element that gives the minimum value from the\nspecified function.",200,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator's direction.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",200,null],[11,"cloned","","Creates an iterator which clone()s all of its elements.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",200,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",200,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",200,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",203,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",202,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",202,null],[10,"into_iter","","Consumes `Self` and returns an iterator over it.",202,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Send","","Types able to be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[5,"drop","","Disposes of a value.",null,null],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a 'destructor'.",null,null],[10,"drop","","A method called when the value goes out of scope.",165,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",192,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",193,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",194,null],[10,"call_once","","This is called when the call operator is used.",194,null],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",71,null],[13,"Some","","Some value `T`",71,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",78,null],[13,"Err","","Contains the error value",78,null],[3,"String","","A growable string stored as a UTF-8 encoded buffer.",null,null],[8,"ToString","","A generic trait for converting a value to a string",null,null],[10,"to_string","","Converts the value of `self` to an owned string",294,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[3,"Vec","","A growable list type, written `Vec<T>` but pronounced 'vector.'",null,null],[0,"num","std","Numeric traits and functions for generic mathematics",null,null],[8,"Zero","std::num","Types that have a \"zero\" value.",null,null],[10,"zero","","The \"zero\" (usually, additive identity) for this type.",300,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[8,"One","","Types that have a \"one\" value.",null,null],[10,"one","","The \"one\" (usually, multiplicative identity) for this type.",301,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[4,"FpCategory","","Used for representing the classification of floating point numbers",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",17,null],[13,"Infinite","","Positive or negative infinity",17,null],[13,"Zero","","Positive or negative zero",17,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",17,null],[13,"Normal","","A regular floating point number",17,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[0,"wrapping","","",null,null],[8,"OverflowingOps","std::num::wrapping","",null,null],[10,"overflowing_add","","",302,null],[10,"overflowing_sub","","",302,null],[10,"overflowing_mul","","",302,null],[10,"overflowing_div","","",302,null],[10,"overflowing_rem","","",302,null],[10,"overflowing_neg","","",302,null],[10,"overflowing_shl","","",302,null],[10,"overflowing_shr","","",302,null],[3,"Wrapping","std::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[0,"collections","std","",null,null],[3,"BTreeMap","std::collections","A map based on a B-Tree.",null,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",290,null],[13,"Excluded","","An exclusive bound.",290,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",290,null],[3,"LinkedList","","A doubly-linked list.",null,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[0,"f32","std","The 32-bit floating point type.",null,null],[17,"RADIX","std::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f32::consts","Archimedes' constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler's number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"f64","std","The 64-bit floating point type.",null,null],[17,"RADIX","std::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f64::consts","Archimedes' constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler's number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"error","std","Traits for working with Errors.",null,null],[8,"Error","std::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",303,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",303,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","std::prelude::v1","",293,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",293,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",293,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",293,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","std::str","",116,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",117,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","std::num","",18,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","","",12,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","std::string","",279,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",280,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","std","Returns true if the boxed type is the same as `T`",303,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",303,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",303,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",303,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",303,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",303,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",303,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",303,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[0,"io","","Traits, helpers, and type definitions for core I/O functionality.",null,null],[3,"Error","std::io","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[3,"Broadcast","","A `Write` adaptor which will write data to multiple locations.",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Tee","","An adaptor which will emit all read data to a specified writer as well.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",304,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",304,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",304,null],[13,"ConnectionReset","","The connection was reset by the remote server.",304,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",304,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",304,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",304,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",304,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",304,null],[13,"AlreadyExists","","An entity already exists, often a file.",304,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",304,null],[13,"InvalidInput","","A parameter was incorrect.",304,null],[13,"InvalidData","","Data not valid for the operation were encountered.",304,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",304,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",304,null],[13,"Interrupted","","This operation was interrupted.",304,null],[13,"Other","","Any I/O error not part of this list.",304,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",305,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",305,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",305,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",306,null],[13,"Other","","Variant representing that an I/O error occurred.",306,null],[11,"fmt","","",307,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",304,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",304,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",307,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",307,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",307,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",307,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",307,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",307,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",307,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",307,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A specialized [`Result`][result] type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",308,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",308,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",308,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",308,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",308,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",308,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",308,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",308,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",308,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",309,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",309,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",309,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",309,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",309,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",309,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",310,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",311,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",311,{"inputs":[{"name":"bufread"},{"name":"usize"}],"output":null}],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",311,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",311,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",311,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",311,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[11,"fmt","","",305,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",305,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",305,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",312,null],[11,"flush","","",312,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",313,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",314,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",314,null],[11,"fill_buf","","",314,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",314,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"read","","",315,null],[11,"next","","",316,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",306,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",317,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",306,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",306,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",306,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",318,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",319,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[0,"sync","std","",null,null],[3,"Arc","std::sync","An atomically reference counted wrapper for shared state.",null,null],[3,"Weak","","A weak pointer to an `Arc`.",null,null],[0,"atomic","","Atomic types",null,null],[3,"AtomicBool","std::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads.",null,null],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM's\n`Monotonic` ordering.",34,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",34,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",34,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",34,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",34,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[14,"assert!","std","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"try!","","Short circuiting evaluation on Err",null,null],[14,"write!","","Use the `format!` syntax to write data into a buffer.",null,null],[14,"writeln!","","Use the `format!` syntax to write data into a buffer, appending a newline.",null,null],[14,"vec!","","Creates a `Vec` containing the arguments.",null,null],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information.",null,null],[14,"panic!","","",null,null]],"paths":[[8,"PartialEq"],[4,"Ordering"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Ord"],[8,"PartialOrd"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"Step"],[8,"Clone"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"Repr"],[8,"MutableByteVector"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"LowerExp"],[8,"Write"],[8,"LowerHex"],[8,"Pointer"],[8,"Debug"],[8,"Binary"],[8,"UpperExp"],[8,"Display"],[8,"Octal"],[8,"UpperHex"],[3,"String"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"Utf16Units"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[8,"ToString"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[8,"Zero"],[8,"One"],[8,"OverflowingOps"],[8,"Error"],[4,"ErrorKind"],[4,"SeekFrom"],[4,"CharsError"],[3,"Error"],[8,"Read"],[8,"Write"],[8,"Seek"],[8,"BufRead"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[3,"Chars"],[3,"Split"],[3,"Lines"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",0,null],[12,"gl_pathv","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused1","","",0,null],[12,"__unused2","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_next","","",13,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_ifu","","",15,null],[12,"ifa_data","","",15,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",5,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",6,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",8,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",9,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",10,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",11,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",12,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",15,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[3,"jmp_buf","libc::types::os::arch::c95","",null,null],[12,"rbx","","",16,null],[12,"rbp","","",16,null],[12,"r12","","",16,null],[12,"r13","","",16,null],[12,"r14","","",16,null],[12,"r15","","",16,null],[12,"rsp","","",16,null],[12,"rip","","",16,null],[6,"c_char","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"jmp_buf"}],"output":{"name":"jmp_buf"}}],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"malloc","libc::funcs::c95::stdlib","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"setjmp","","",null,null],[5,"longjmp","","",null,null]],"paths":[[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"jmp_buf"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['kernel'] = {"items":[[0,"","kernel","",null,null],[5,"kmain","","",null,{"inputs":[],"output":null}],[0,"bitflags","","A typesafe bitmask flag generator.",null,null],[0,"lazy_static","","A macro for declaring lazily evaluated statics.",null,null],[0,"mutex","","",null,null],[3,"Mutex","kernel::mutex","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[6,"StaticMutex","","A Mutex which may be used statically.",null,null],[17,"STATIC_MUTEX_INIT","","A initializer for StaticMutex, containing no data.",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the spinlock and returns a guard.",0,null],[11,"destroy","","Deallocates resources associated with this static mutex.",0,{"inputs":[{"name":"mutex"}],"output":null}],[11,"deref","","",1,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","The dropping of the MutexGuard will release the lock it was created from.",1,{"inputs":[{"name":"mutexguard"}],"output":null}],[0,"arch","kernel","",null,null],[5,"disable_interrupts","kernel::arch","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"restore_interrupts","","",null,{"inputs":[{"name":"usize"}],"output":null}],[0,"debug","","",null,null],[5,"puts","kernel::arch::debug","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"put_cstr","","",null,null],[5,"print_stack_trace","","",null,null],[0,"keyboard","kernel::arch","",null,null],[3,"Key","kernel::arch::keyboard","",null,null],[3,"Keyboard","","",null,null],[0,"keys","","",null,null],[3,"Bucky","kernel::arch::keyboard::keys","",null,null],[17,"BUCKY_RELEASE","","",null,null],[17,"BUCKY_ALT","","",null,null],[17,"BUCKY_CTRL","","",null,null],[17,"BUCKY_SHIFT","","",null,null],[17,"BUCKY_CAPS","","",null,null],[17,"BUCKY_NUM","","",null,null],[17,"BUCKY_SCRL","","",null,null],[17,"BUCKY_ALTGR","","",null,null],[17,"F1","","",null,null],[17,"F2","","",null,null],[17,"F3","","",null,null],[17,"F4","","",null,null],[17,"F5","","",null,null],[17,"F6","","",null,null],[17,"F7","","",null,null],[17,"F8","","",null,null],[17,"F9","","",null,null],[17,"F10","","",null,null],[17,"F11","","",null,null],[17,"F12","","",null,null],[17,"INS","","",null,null],[17,"DEL","","",null,null],[17,"HOME","","",null,null],[17,"END","","",null,null],[17,"PGUP","","",null,null],[17,"PGDN","","",null,null],[17,"LEFT","","",null,null],[17,"UP","","",null,null],[17,"DOWN","","",null,null],[17,"RIGHT","","",null,null],[17,"PRTSC","","",null,null],[17,"PAUSE","","",null,null],[17,"LWIN","","",null,null],[17,"RWIN","","",null,null],[17,"MENU","","",null,null],[17,"SYSR","","",null,null],[0,"pci","kernel::arch","",null,null],[5,"inw","kernel::arch::pci","",null,null],[5,"inl","","",null,null],[5,"find","","",null,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"option"}}],[0,"serial","kernel::arch","",null,null],[5,"puts","kernel::arch::serial","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"put_cstr","","",null,null],[0,"vga_bochs","kernel::arch","",null,null],[5,"init","kernel::arch::vga_bochs","",null,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[0,"vga","kernel::arch","",null,null],[3,"Vga","kernel::arch::vga","",null,null],[0,"cpu","kernel::arch","",null,null],[3,"Regs","kernel::arch::cpu","",null,null],[12,"r15","","",2,null],[12,"r14","","",2,null],[12,"r13","","",2,null],[12,"r12","","",2,null],[12,"r11","","",2,null],[12,"r10","","",2,null],[12,"r9","","",2,null],[12,"r8","","",2,null],[12,"rsi","","",2,null],[12,"rdi","","",2,null],[12,"rbp","","",2,null],[12,"rdx","","",2,null],[12,"rcx","","",2,null],[12,"rbx","","",2,null],[12,"rax","","",2,null],[12,"error","","",2,null],[12,"rip","","",2,null],[12,"cs","","",2,null],[12,"rflags","","",2,null],[12,"rsp","","",2,null],[12,"ss","","",2,null],[3,"Tss","","",null,null],[12,"reserved1","","",3,null],[12,"rsp0","","",3,null],[12,"rsp1","","",3,null],[12,"rsp2","","",3,null],[12,"reserved2","","",3,null],[12,"ist1","","",3,null],[12,"ist2","","",3,null],[12,"ist3","","",3,null],[12,"ist4","","",3,null],[12,"ist5","","",3,null],[12,"ist6","","",3,null],[12,"ist7","","",3,null],[12,"reserved3","","",3,null],[12,"iopm_len","","",3,null],[12,"reserved4","","",3,null],[3,"DescriptorExtra","","",null,null],[12,"limit_low","","",4,null],[12,"base_low","","",4,null],[12,"base_mid","","",4,null],[12,"access","","",4,null],[12,"limit_high_and_flags","","",4,null],[12,"base_high","","",4,null],[12,"base_extra","","",4,null],[12,"reserved","","",4,null],[3,"InterruptDescriptor","","",null,null],[12,"offset_low","","",5,null],[12,"selector","","",5,null],[12,"reserved1","","",5,null],[12,"type_attr","","",5,null],[12,"offset_high","","",5,null],[12,"offset_extra","","",5,null],[12,"reserved2","","",5,null],[3,"Dtr","","",null,null],[12,"limit","","",6,null],[12,"base","","",6,null],[5,"invlpg","","",null,null],[5,"sysret","","",null,null],[5,"wrmsr","","",null,{"inputs":[{"name":"u32"},{"name":"u64"}],"output":null}],[5,"read_cr2","","",null,null],[5,"read_cr3","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"write_cr3","","",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"int","","",null,{"inputs":[{"name":"u8"}],"output":null}],[5,"ltr","","",null,{"inputs":[{"name":"u16"}],"output":null}],[5,"sti","","",null,{"inputs":[],"output":null}],[5,"interrupts_enabled","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"wait_for_interrupt","","",null,{"inputs":[],"output":null}],[5,"current_frame","","",null,null],[5,"outb","","",null,{"inputs":[{"name":"u16"},{"name":"u8"}],"output":null}],[5,"inb","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"outw","","",null,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":null}],[5,"inw","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"inl","","",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"outl","","",null,{"inputs":[{"name":"u16"},{"name":"u32"}],"output":null}],[5,"lidt","","",null,null],[17,"IA32_STAR","","",null,null],[17,"IA32_LSTAR","","",null,null],[17,"IA32_SFMASK","","",null,null],[11,"fmt","","",2,{"inputs":[{"name":"regs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[{"name":"tss"}],"output":{"name":"tss"}}],[11,"default","","",4,{"inputs":[{"name":"descriptorextra"}],"output":{"name":"descriptorextra"}}],[11,"default","","",5,{"inputs":[{"name":"interruptdescriptor"}],"output":{"name":"interruptdescriptor"}}],[0,"isr","kernel::arch","",null,null],[5,"register_irq_handler","kernel::arch::isr","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"dropirqhandler"}}],[5,"init_once","","",null,{"inputs":[],"output":null}],[5,"set_kernel_stack","","",null,null],[5,"irq","","",null,{"inputs":[{"name":"usize"},{"name":"regs"}],"output":null}],[5,"exception","","",null,{"inputs":[{"name":"u8"},{"name":"regs"}],"output":null}],[5,"interrupt","","",null,{"inputs":[{"name":"u8"},{"name":"regs"}],"output":null}],[6,"DropIrqHandler","","",null,null],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",7,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",7,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","collections::binary_heap","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",8,null],[11,"default","","",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",8,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",8,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",8,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",8,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",8,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",8,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",8,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",8,null],[11,"drop","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",8,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",8,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",8,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"next","collections::btree::node","",13,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",13,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",13,null],[11,"drop","","",14,null],[11,"as_slices","","",14,null],[11,"as_slices_mut","","",14,null],[11,"as_slices_internal","","",14,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",14,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",14,null],[11,"keys_mut","","",14,null],[11,"vals","","",14,null],[11,"vals_mut","","",14,null],[11,"edges","","",14,null],[11,"edges_mut","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",14,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",14,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",14,null],[11,"len","","How many key-value pairs the node contains",14,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",14,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",14,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",15,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",15,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",15,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",15,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favor handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",15,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",15,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",15,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",15,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",15,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",14,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",14,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",14,null],[11,"clone","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",16,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",17,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",18,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",19,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",19,{"inputs":[{"name":"nodeslice"},{"name":"q"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",19,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",20,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",20,{"inputs":[{"name":"mutnodeslice"},{"name":"q"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",20,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",21,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",21,null],[11,"get","","Returns a reference to the value corresponding to the key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",21,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",23,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",24,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",24,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",25,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",25,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",26,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",26,null],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",26,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",21,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",21,null],[11,"extend","","",21,null],[11,"hash","","",21,null],[11,"default","","",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",21,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",21,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",21,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",18,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next_back","","",27,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",31,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",32,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",32,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",33,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",34,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",34,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",35,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",36,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",36,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",21,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",21,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",21,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",21,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",37,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",37,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",37,null],[11,"contains","","Returns `true` if the set contains a value.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",37,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",37,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",37,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",37,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",37,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",37,null],[11,"extend","","",37,null],[11,"default","","",37,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",37,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",41,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",42,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",43,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",44,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","collections::borrow","",45,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",45,null],[11,"into_owned","","Extracts the owned data.",45,null],[11,"deref","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",45,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"into_cow","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",46,null],[11,"cmp","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",46,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",46,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",46,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",46,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",46,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"from_iter","","",46,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",46,null],[11,"extend","","",46,null],[11,"clone","core::fmt::rt::v1","",48,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",49,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",50,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",51,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",52,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",53,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",55,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",55,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",56,null],[11,"iter","","Provides a forward iterator.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",56,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",56,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",56,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",56,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",56,null],[11,"next","","",53,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",57,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",56,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",56,null],[11,"extend","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",56,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",56,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",56,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"start","core::ops","",58,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",59,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",60,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",60,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",61,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",61,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"borrow","collections::string","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",63,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",65,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",64,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",66,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",67,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",68,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",70,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",71,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",69,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",72,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",73,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",73,null],[11,"matching","","",73,null],[11,"use_early_reject","","",74,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",74,null],[11,"matching","","",74,null],[11,"cmp","collections::string","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",62,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",62,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",62,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",62,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",62,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",62,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",62,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",62,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",62,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",62,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",62,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",62,null],[11,"push","","Adds the given character to the end of the string.",62,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",62,null],[11,"truncate","","Shortens a string to the specified length.",62,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",62,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",62,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",62,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",62,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",62,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",62,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",62,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts the string into `Box<str>`.",62,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_boxed_slice","","Converts the string into `Box<str>`.",62,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",75,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",75,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",75,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",62,null],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",62,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",62,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",62,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",62,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"add","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",62,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",62,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",77,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",62,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",62,null],[11,"from","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",45,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",62,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",62,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",62,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",62,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",78,null],[11,"next","","",78,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",7,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",45,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"count","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",79,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",79,null],[11,"next","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",80,null],[11,"clone","collections::vec_deque","",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",81,null],[11,"default","","",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",81,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",81,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",81,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",81,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",81,null],[11,"iter","","Returns a front-to-back iterator.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",81,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",81,null],[11,"len","","Returns the number of elements in the `VecDeque`.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items from start to end. The element\nrange is removed even if the iterator is not consumed until the end.",81,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",81,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",81,null],[11,"push_back","","Appends an element to the back of a buffer",81,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_back_remove","","deprecated",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","deprecated",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",81,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",81,null],[11,"retain","","Retains only the elements specified by the predicate.",81,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",81,null],[11,"clone","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",85,null],[11,"next","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",81,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",81,null],[11,"index","","",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",81,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",81,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",81,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",81,null],[11,"extend","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",86,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",87,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",88,null],[11,"make_place","","",88,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",88,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",89,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",87,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",88,null],[11,"new","","Allocates memory on the heap and then moves `x` into it.",89,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",89,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",89,null],[11,"default","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",89,null],[11,"clone","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",89,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",89,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",89,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",89,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",89,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",89,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[0,"mmu","kernel::arch","",null,null],[3,"PageFlags","kernel::arch::mmu","",null,null],[3,"PageEntry","","",null,null],[3,"AddressSpace","","",null,null],[5,"pml4_entry","","",null,null],[5,"pdpt_entry","","",null,null],[5,"pd_entry","","",null,null],[5,"pt_entry","","",null,null],[5,"print_mapping","","",null,null],[6,"PT","","",null,null],[6,"PD","","",null,null],[6,"PDPT","","",null,null],[6,"PML4","","",null,null],[17,"PAGE_PRESENT","","",null,null],[17,"PAGE_WRITABLE","","",null,null],[17,"PAGE_USER","","",null,null],[17,"PAGE_WRITETHROUGH","","",null,null],[17,"PAGE_NOCACHE","","",null,null],[17,"PAGE_ACCESSED","","",null,null],[17,"PAGE_DIRTY","","",null,null],[17,"PAGE_BIG","","",null,null],[17,"PAGE_GLOBAL","","",null,null],[11,"hash","","",90,null],[11,"cmp","","",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"pageflags"}],"output":{"name":"pageflags"}}],[11,"eq","","",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"pageflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[{"name":"pageflags"}],"output":{"name":"pageflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[{"name":"pageflags"}],"output":{"name":"pageflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"pageflags"}],"output":{"name":"usize"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"pageflags"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"pageflags"},{"name":"usize"}],"output":{"name":"pageflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"pageflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"pageflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"pageflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"pageflags"},{"name":"pageflags"}],"output":{"name":"pageflags"}}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"pageflags"}],"output":{"name":"pageflags"}}],[11,"entry","","",91,null],[11,"addr","","",91,{"inputs":[{"name":"pageentry"}],"output":{"name":"usize"}}],[11,"flags","","",91,{"inputs":[{"name":"pageentry"}],"output":{"name":"pageflags"}}],[11,"as_mut_ref","","",91,{"inputs":[{"name":"pageentry"}],"output":{"name":"t"}}],[11,"as_ref","","",91,{"inputs":[{"name":"pageentry"}],"output":{"name":"t"}}],[11,"ensure_present","","",91,{"inputs":[{"name":"pageentry"},{"name":"physicalbitmap"}],"output":{"name":"result"}}],[11,"map","","",91,{"inputs":[{"name":"pageentry"},{"name":"usize"},{"name":"bool"},{"name":"bool"}],"output":null}],[11,"unmap","","",91,{"inputs":[{"name":"pageentry"}],"output":null}],[11,"present","","",91,{"inputs":[{"name":"pageentry"}],"output":{"name":"bool"}}],[11,"big","","",91,{"inputs":[{"name":"pageentry"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"pageentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",92,{"inputs":[{"name":"addressspace"},{"name":"arc"}],"output":{"name":"result"}}],[11,"switch","","",92,{"inputs":[{"name":"addressspace"}],"output":null}],[11,"map","","",92,null],[11,"drop","","",92,{"inputs":[{"name":"addressspace"}],"output":null}],[0,"process","kernel::arch","",null,null],[3,"ArchProcess","kernel::arch::process","",null,null],[11,"new","","",93,{"inputs":[{"name":"archprocess"},{"name":"arc"}],"output":{"name":"result"}}],[11,"switch","","",93,{"inputs":[{"name":"archprocess"}],"output":null}],[11,"map","","",93,null],[0,"thread","kernel::arch","",null,null],[5,"syscall_entry","kernel::arch::thread","",null,{"inputs":[{"name":"regs"}],"output":{"name":"isize"}}],[5,"thread_entry","","",null,null],[5,"new_jmp_buf","","",null,null],[5,"jmp_user_mode","","",null,null],[6,"RegsHandler","","",null,null],[0,"bit_vec","kernel","Collections implemented with bit vectors.",null,null],[3,"BitVec","kernel::bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",94,{"inputs":[{"name":"bitblock"}],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",94,{"inputs":[{"name":"bitblock"}],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",94,{"inputs":[{"name":"bitblock"},{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1's in the bitwise repr",94,{"inputs":[{"name":"bitblock"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",94,{"inputs":[{"name":"bitblock"}],"output":{"name":"self"}}],[10,"one","","Get `1`",94,{"inputs":[{"name":"bitblock"}],"output":{"name":"self"}}],[11,"index","","",95,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",95,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",95,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",95,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"negate","","Flips all bits.",95,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",95,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",95,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",95,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",95,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",95,{"inputs":[{"name":"bitvec"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",95,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",95,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"default","","",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_iter","","",95,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",95,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":null}],[11,"clone","","",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"clone_from","","",95,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",95,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",95,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",95,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,{"inputs":[{"name":"bitvec"},{"name":"h"}],"output":null}],[11,"eq","","",95,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",97,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",95,{"inputs":[{"name":"bitvec"}],"output":{"name":"intoiter"}}],[11,"clone","","",98,{"inputs":[{"name":"blocks"}],"output":{"name":"blocks"}}],[11,"next","","",98,{"inputs":[{"name":"blocks"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"blocks"}],"output":{"name":"option"}}],[0,"console","kernel","",null,null],[3,"Console","kernel::console","",null,null],[11,"new","","",99,{"inputs":[{"name":"console"},{"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"async_read","","",99,{"inputs":[{"name":"console"}],"output":{"name":"option"}}],[11,"read","","",99,{"inputs":[{"name":"console"}],"output":{"name":"option"}}],[11,"write","","",99,{"inputs":[{"name":"console"}],"output":{"name":"option"}}],[0,"deferred","kernel","",null,null],[3,"Deferred","kernel::deferred","",null,null],[11,"new","","",100,{"inputs":[{"name":"deferred"}],"output":{"name":"self"}}],[11,"resolve","","",100,{"inputs":[{"name":"deferred"},{"name":"a"}],"output":null}],[11,"get","","",100,{"inputs":[{"name":"deferred"}],"output":{"name":"a"}}],[11,"try_get","","",100,{"inputs":[{"name":"deferred"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"deferred"}],"output":{"name":"self"}}],[11,"deferred_i32","","",100,{"inputs":[{"name":"deferred"}],"output":{"name":"option"}}],[0,"elf","kernel","",null,null],[3,"Struct_Unnamed1","kernel::elf","",null,null],[12,"e_ident","","",101,null],[12,"e_type","","",101,null],[12,"e_machine","","",101,null],[12,"e_version","","",101,null],[12,"e_entry","","",101,null],[12,"e_phoff","","",101,null],[12,"e_shoff","","",101,null],[12,"e_flags","","",101,null],[12,"e_ehsize","","",101,null],[12,"e_phentsize","","",101,null],[12,"e_phnum","","",101,null],[12,"e_shentsize","","",101,null],[12,"e_shnum","","",101,null],[12,"e_shstrndx","","",101,null],[3,"Struct_Unnamed2","","",null,null],[12,"e_ident","","",102,null],[12,"e_type","","",102,null],[12,"e_machine","","",102,null],[12,"e_version","","",102,null],[12,"e_entry","","",102,null],[12,"e_phoff","","",102,null],[12,"e_shoff","","",102,null],[12,"e_flags","","",102,null],[12,"e_ehsize","","",102,null],[12,"e_phentsize","","",102,null],[12,"e_phnum","","",102,null],[12,"e_shentsize","","",102,null],[12,"e_shnum","","",102,null],[12,"e_shstrndx","","",102,null],[3,"Struct_Unnamed3","","",null,null],[12,"sh_name","","",103,null],[12,"sh_type","","",103,null],[12,"sh_flags","","",103,null],[12,"sh_addr","","",103,null],[12,"sh_offset","","",103,null],[12,"sh_size","","",103,null],[12,"sh_link","","",103,null],[12,"sh_info","","",103,null],[12,"sh_addralign","","",103,null],[12,"sh_entsize","","",103,null],[3,"Struct_Unnamed4","","",null,null],[12,"sh_name","","",104,null],[12,"sh_type","","",104,null],[12,"sh_flags","","",104,null],[12,"sh_addr","","",104,null],[12,"sh_offset","","",104,null],[12,"sh_size","","",104,null],[12,"sh_link","","",104,null],[12,"sh_info","","",104,null],[12,"sh_addralign","","",104,null],[12,"sh_entsize","","",104,null],[3,"Struct_Unnamed5","","",null,null],[12,"st_name","","",105,null],[12,"st_value","","",105,null],[12,"st_size","","",105,null],[12,"st_info","","",105,null],[12,"st_other","","",105,null],[12,"st_shndx","","",105,null],[3,"Struct_Unnamed6","","",null,null],[12,"st_name","","",106,null],[12,"st_info","","",106,null],[12,"st_other","","",106,null],[12,"st_shndx","","",106,null],[12,"st_value","","",106,null],[12,"st_size","","",106,null],[3,"Struct_Unnamed7","","",null,null],[12,"si_boundto","","",107,null],[12,"si_flags","","",107,null],[3,"Struct_Unnamed8","","",null,null],[12,"si_boundto","","",108,null],[12,"si_flags","","",108,null],[3,"Struct_Unnamed9","","",null,null],[12,"r_offset","","",109,null],[12,"r_info","","",109,null],[3,"Struct_Unnamed10","","",null,null],[12,"r_offset","","",110,null],[12,"r_info","","",110,null],[3,"Struct_Unnamed11","","",null,null],[12,"r_offset","","",111,null],[12,"r_info","","",111,null],[12,"r_addend","","",111,null],[3,"Struct_Unnamed12","","",null,null],[12,"r_offset","","",112,null],[12,"r_info","","",112,null],[12,"r_addend","","",112,null],[3,"Struct_Unnamed13","","",null,null],[12,"p_type","","",113,null],[12,"p_offset","","",113,null],[12,"p_vaddr","","",113,null],[12,"p_paddr","","",113,null],[12,"p_filesz","","",113,null],[12,"p_memsz","","",113,null],[12,"p_flags","","",113,null],[12,"p_align","","",113,null],[3,"Struct_Unnamed14","","",null,null],[12,"p_type","","",114,null],[12,"p_flags","","",114,null],[12,"p_offset","","",114,null],[12,"p_vaddr","","",114,null],[12,"p_paddr","","",114,null],[12,"p_filesz","","",114,null],[12,"p_memsz","","",114,null],[12,"p_align","","",114,null],[3,"Struct_Unnamed15","","",null,null],[12,"d_tag","","",115,null],[12,"d_un","","",115,null],[3,"Union_Unnamed16","","",null,null],[12,"_bindgen_data_","","",116,null],[3,"Struct_Unnamed17","","",null,null],[12,"d_tag","","",117,null],[12,"d_un","","",117,null],[3,"Union_Unnamed18","","",null,null],[12,"_bindgen_data_","","",118,null],[3,"Struct_Unnamed19","","",null,null],[12,"vd_version","","",119,null],[12,"vd_flags","","",119,null],[12,"vd_ndx","","",119,null],[12,"vd_cnt","","",119,null],[12,"vd_hash","","",119,null],[12,"vd_aux","","",119,null],[12,"vd_next","","",119,null],[3,"Struct_Unnamed20","","",null,null],[12,"vd_version","","",120,null],[12,"vd_flags","","",120,null],[12,"vd_ndx","","",120,null],[12,"vd_cnt","","",120,null],[12,"vd_hash","","",120,null],[12,"vd_aux","","",120,null],[12,"vd_next","","",120,null],[3,"Struct_Unnamed21","","",null,null],[12,"vda_name","","",121,null],[12,"vda_next","","",121,null],[3,"Struct_Unnamed22","","",null,null],[12,"vda_name","","",122,null],[12,"vda_next","","",122,null],[3,"Struct_Unnamed23","","",null,null],[12,"vn_version","","",123,null],[12,"vn_cnt","","",123,null],[12,"vn_file","","",123,null],[12,"vn_aux","","",123,null],[12,"vn_next","","",123,null],[3,"Struct_Unnamed24","","",null,null],[12,"vn_version","","",124,null],[12,"vn_cnt","","",124,null],[12,"vn_file","","",124,null],[12,"vn_aux","","",124,null],[12,"vn_next","","",124,null],[3,"Struct_Unnamed25","","",null,null],[12,"vna_hash","","",125,null],[12,"vna_flags","","",125,null],[12,"vna_other","","",125,null],[12,"vna_name","","",125,null],[12,"vna_next","","",125,null],[3,"Struct_Unnamed26","","",null,null],[12,"vna_hash","","",126,null],[12,"vna_flags","","",126,null],[12,"vna_other","","",126,null],[12,"vna_name","","",126,null],[12,"vna_next","","",126,null],[3,"Struct_Unnamed27","","",null,null],[12,"a_type","","",127,null],[12,"a_un","","",127,null],[3,"Union_Unnamed28","","",null,null],[12,"_bindgen_data_","","",128,null],[3,"Struct_Unnamed29","","",null,null],[12,"a_type","","",129,null],[12,"a_un","","",129,null],[3,"Union_Unnamed30","","",null,null],[12,"_bindgen_data_","","",130,null],[3,"Struct_Unnamed31","","",null,null],[12,"n_namesz","","",131,null],[12,"n_descsz","","",131,null],[12,"n_type","","",131,null],[3,"Struct_Unnamed32","","",null,null],[12,"n_namesz","","",132,null],[12,"n_descsz","","",132,null],[12,"n_type","","",132,null],[3,"Struct_Unnamed33","","",null,null],[12,"m_value","","",133,null],[12,"m_info","","",133,null],[12,"m_poffset","","",133,null],[12,"m_repeat","","",133,null],[12,"m_stride","","",133,null],[3,"Struct_Unnamed34","","",null,null],[12,"m_value","","",134,null],[12,"m_info","","",134,null],[12,"m_poffset","","",134,null],[12,"m_repeat","","",134,null],[12,"m_stride","","",134,null],[3,"Union_Unnamed35","","",null,null],[12,"_bindgen_data_","","",135,null],[3,"Struct_Unnamed36","","",null,null],[12,"gt_current_g_value","","",136,null],[12,"gt_unused","","",136,null],[3,"Struct_Unnamed37","","",null,null],[12,"gt_g_value","","",137,null],[12,"gt_bytes","","",137,null],[3,"Struct_Unnamed38","","",null,null],[12,"ri_gprmask","","",138,null],[12,"ri_cprmask","","",138,null],[12,"ri_gp_value","","",138,null],[3,"Struct_Unnamed39","","",null,null],[12,"kind","","",139,null],[12,"size","","",139,null],[12,"section","","",139,null],[12,"info","","",139,null],[3,"Struct_Unnamed40","","",null,null],[12,"hwp_flags1","","",140,null],[12,"hwp_flags2","","",140,null],[3,"Struct_Unnamed41","","",null,null],[12,"l_name","","",141,null],[12,"l_time_stamp","","",141,null],[12,"l_checksum","","",141,null],[12,"l_version","","",141,null],[12,"l_flags","","",141,null],[3,"Struct_Unnamed42","","",null,null],[12,"l_name","","",142,null],[12,"l_time_stamp","","",142,null],[12,"l_checksum","","",142,null],[12,"l_version","","",142,null],[12,"l_flags","","",142,null],[6,"int64_t","","",null,null],[6,"uint64_t","","",null,null],[6,"int_least64_t","","",null,null],[6,"uint_least64_t","","",null,null],[6,"int_fast64_t","","",null,null],[6,"uint_fast64_t","","",null,null],[6,"int32_t","","",null,null],[6,"uint32_t","","",null,null],[6,"int_least32_t","","",null,null],[6,"uint_least32_t","","",null,null],[6,"int_fast32_t","","",null,null],[6,"uint_fast32_t","","",null,null],[6,"int16_t","","",null,null],[6,"uint16_t","","",null,null],[6,"int_least16_t","","",null,null],[6,"uint_least16_t","","",null,null],[6,"int_fast16_t","","",null,null],[6,"uint_fast16_t","","",null,null],[6,"int8_t","","",null,null],[6,"uint8_t","","",null,null],[6,"int_least8_t","","",null,null],[6,"uint_least8_t","","",null,null],[6,"int_fast8_t","","",null,null],[6,"uint_fast8_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Sword","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Sword","","",null,null],[6,"Elf32_Xword","","",null,null],[6,"Elf32_Sxword","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"Elf64_Sxword","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf32_Section","","",null,null],[6,"Elf64_Section","","",null,null],[6,"Elf32_Versym","","",null,null],[6,"Elf64_Versym","","",null,null],[6,"Elf32_Ehdr","","",null,null],[6,"Elf64_Ehdr","","",null,null],[6,"Elf32_Shdr","","",null,null],[6,"Elf64_Shdr","","",null,null],[6,"Elf32_Sym","","",null,null],[6,"Elf64_Sym","","",null,null],[6,"Elf32_Syminfo","","",null,null],[6,"Elf64_Syminfo","","",null,null],[6,"Elf32_Rel","","",null,null],[6,"Elf64_Rel","","",null,null],[6,"Elf32_Rela","","",null,null],[6,"Elf64_Rela","","",null,null],[6,"Elf32_Phdr","","",null,null],[6,"Elf64_Phdr","","",null,null],[6,"Elf32_Dyn","","",null,null],[6,"Elf64_Dyn","","",null,null],[6,"Elf32_Verdef","","",null,null],[6,"Elf64_Verdef","","",null,null],[6,"Elf32_Verdaux","","",null,null],[6,"Elf64_Verdaux","","",null,null],[6,"Elf32_Verneed","","",null,null],[6,"Elf64_Verneed","","",null,null],[6,"Elf32_Vernaux","","",null,null],[6,"Elf64_Vernaux","","",null,null],[6,"Elf32_auxv_t","","",null,null],[6,"Elf64_auxv_t","","",null,null],[6,"Elf32_Nhdr","","",null,null],[6,"Elf64_Nhdr","","",null,null],[6,"Elf32_Move","","",null,null],[6,"Elf64_Move","","",null,null],[6,"Elf32_gptab","","",null,null],[6,"Elf32_RegInfo","","",null,null],[6,"Elf_Options","","",null,null],[6,"Elf_Options_Hw","","",null,null],[6,"Elf32_Lib","","",null,null],[6,"Elf64_Lib","","",null,null],[6,"Elf32_Conflict","","",null,null],[17,"_ELF_H","","",null,null],[17,"EI_MAG0","","",null,null],[17,"ELFMAG0","","",null,null],[17,"ELFMAG1","","",null,null],[17,"ELFMAG2","","",null,null],[17,"ELFMAG3","","",null,null],[17,"EI_MAG1","","",null,null],[17,"EI_MAG2","","",null,null],[17,"EI_MAG3","","",null,null],[17,"SELFMAG","","",null,null],[17,"EI_CLASS","","",null,null],[17,"ELFCLASSNONE","","",null,null],[17,"ELFCLASS32","","",null,null],[17,"ELFCLASS64","","",null,null],[17,"ELFCLASSNUM","","",null,null],[17,"EI_DATA","","",null,null],[17,"ELFDATANONE","","",null,null],[17,"ELFDATA2LSB","","",null,null],[17,"ELFDATA2MSB","","",null,null],[17,"ELFDATANUM","","",null,null],[17,"EI_VERSION","","",null,null],[17,"EI_OSABI","","",null,null],[17,"ELFOSABI_NONE","","",null,null],[17,"ELFOSABI_SYSV","","",null,null],[17,"ELFOSABI_HPUX","","",null,null],[17,"ELFOSABI_NETBSD","","",null,null],[17,"ELFOSABI_GNU","","",null,null],[17,"ELFOSABI_SOLARIS","","",null,null],[17,"ELFOSABI_AIX","","",null,null],[17,"ELFOSABI_IRIX","","",null,null],[17,"ELFOSABI_FREEBSD","","",null,null],[17,"ELFOSABI_TRU64","","",null,null],[17,"ELFOSABI_MODESTO","","",null,null],[17,"ELFOSABI_OPENBSD","","",null,null],[17,"ELFOSABI_ARM_AEABI","","",null,null],[17,"ELFOSABI_ARM","","",null,null],[17,"ELFOSABI_STANDALONE","","",null,null],[17,"EI_ABIVERSION","","",null,null],[17,"EI_PAD","","",null,null],[17,"ET_NONE","","",null,null],[17,"ET_REL","","",null,null],[17,"ET_EXEC","","",null,null],[17,"ET_DYN","","",null,null],[17,"ET_CORE","","",null,null],[17,"ET_NUM","","",null,null],[17,"ET_LOOS","","",null,null],[17,"ET_HIOS","","",null,null],[17,"ET_LOPROC","","",null,null],[17,"ET_HIPROC","","",null,null],[17,"EM_NONE","","",null,null],[17,"EM_M32","","",null,null],[17,"EM_SPARC","","",null,null],[17,"EM_386","","",null,null],[17,"EM_68K","","",null,null],[17,"EM_88K","","",null,null],[17,"EM_860","","",null,null],[17,"EM_MIPS","","",null,null],[17,"EM_S370","","",null,null],[17,"EM_MIPS_RS3_LE","","",null,null],[17,"EM_PARISC","","",null,null],[17,"EM_VPP500","","",null,null],[17,"EM_SPARC32PLUS","","",null,null],[17,"EM_960","","",null,null],[17,"EM_PPC","","",null,null],[17,"EM_PPC64","","",null,null],[17,"EM_S390","","",null,null],[17,"EM_V800","","",null,null],[17,"EM_FR20","","",null,null],[17,"EM_RH32","","",null,null],[17,"EM_RCE","","",null,null],[17,"EM_ARM","","",null,null],[17,"EM_FAKE_ALPHA","","",null,null],[17,"EM_SH","","",null,null],[17,"EM_SPARCV9","","",null,null],[17,"EM_TRICORE","","",null,null],[17,"EM_ARC","","",null,null],[17,"EM_H8_300","","",null,null],[17,"EM_H8_300H","","",null,null],[17,"EM_H8S","","",null,null],[17,"EM_H8_500","","",null,null],[17,"EM_IA_64","","",null,null],[17,"EM_MIPS_X","","",null,null],[17,"EM_COLDFIRE","","",null,null],[17,"EM_68HC12","","",null,null],[17,"EM_MMA","","",null,null],[17,"EM_PCP","","",null,null],[17,"EM_NCPU","","",null,null],[17,"EM_NDR1","","",null,null],[17,"EM_STARCORE","","",null,null],[17,"EM_ME16","","",null,null],[17,"EM_ST100","","",null,null],[17,"EM_TINYJ","","",null,null],[17,"EM_X86_64","","",null,null],[17,"EM_PDSP","","",null,null],[17,"EM_FX66","","",null,null],[17,"EM_ST9PLUS","","",null,null],[17,"EM_ST7","","",null,null],[17,"EM_68HC16","","",null,null],[17,"EM_68HC11","","",null,null],[17,"EM_68HC08","","",null,null],[17,"EM_68HC05","","",null,null],[17,"EM_SVX","","",null,null],[17,"EM_ST19","","",null,null],[17,"EM_VAX","","",null,null],[17,"EM_CRIS","","",null,null],[17,"EM_JAVELIN","","",null,null],[17,"EM_FIREPATH","","",null,null],[17,"EM_ZSP","","",null,null],[17,"EM_MMIX","","",null,null],[17,"EM_HUANY","","",null,null],[17,"EM_PRISM","","",null,null],[17,"EM_AVR","","",null,null],[17,"EM_FR30","","",null,null],[17,"EM_D10V","","",null,null],[17,"EM_D30V","","",null,null],[17,"EM_V850","","",null,null],[17,"EM_M32R","","",null,null],[17,"EM_MN10300","","",null,null],[17,"EM_MN10200","","",null,null],[17,"EM_PJ","","",null,null],[17,"EM_OPENRISC","","",null,null],[17,"EM_ARC_A5","","",null,null],[17,"EM_XTENSA","","",null,null],[17,"EM_AARCH64","","",null,null],[17,"EM_TILEPRO","","",null,null],[17,"EM_MICROBLAZE","","",null,null],[17,"EM_TILEGX","","",null,null],[17,"EM_NUM","","",null,null],[17,"EM_ALPHA","","",null,null],[17,"EV_NONE","","",null,null],[17,"EV_CURRENT","","",null,null],[17,"EV_NUM","","",null,null],[17,"SHN_UNDEF","","",null,null],[17,"SHN_LORESERVE","","",null,null],[17,"SHN_LOPROC","","",null,null],[17,"SHN_BEFORE","","",null,null],[17,"SHN_AFTER","","",null,null],[17,"SHN_HIPROC","","",null,null],[17,"SHN_LOOS","","",null,null],[17,"SHN_HIOS","","",null,null],[17,"SHN_ABS","","",null,null],[17,"SHN_COMMON","","",null,null],[17,"SHN_XINDEX","","",null,null],[17,"SHN_HIRESERVE","","",null,null],[17,"SHT_NULL","","",null,null],[17,"SHT_PROGBITS","","",null,null],[17,"SHT_SYMTAB","","",null,null],[17,"SHT_STRTAB","","",null,null],[17,"SHT_RELA","","",null,null],[17,"SHT_HASH","","",null,null],[17,"SHT_DYNAMIC","","",null,null],[17,"SHT_NOTE","","",null,null],[17,"SHT_NOBITS","","",null,null],[17,"SHT_REL","","",null,null],[17,"SHT_SHLIB","","",null,null],[17,"SHT_DYNSYM","","",null,null],[17,"SHT_INIT_ARRAY","","",null,null],[17,"SHT_FINI_ARRAY","","",null,null],[17,"SHT_PREINIT_ARRAY","","",null,null],[17,"SHT_GROUP","","",null,null],[17,"SHT_SYMTAB_SHNDX","","",null,null],[17,"SHT_NUM","","",null,null],[17,"SHT_LOOS","","",null,null],[17,"SHT_GNU_ATTRIBUTES","","",null,null],[17,"SHT_GNU_HASH","","",null,null],[17,"SHT_GNU_LIBLIST","","",null,null],[17,"SHT_CHECKSUM","","",null,null],[17,"SHT_LOSUNW","","",null,null],[17,"SHT_SUNW_move","","",null,null],[17,"SHT_SUNW_COMDAT","","",null,null],[17,"SHT_SUNW_syminfo","","",null,null],[17,"SHT_GNU_verdef","","",null,null],[17,"SHT_GNU_verneed","","",null,null],[17,"SHT_GNU_versym","","",null,null],[17,"SHT_HISUNW","","",null,null],[17,"SHT_HIOS","","",null,null],[17,"SHT_LOPROC","","",null,null],[17,"SHT_HIPROC","","",null,null],[17,"SHT_LOUSER","","",null,null],[17,"SHT_HIUSER","","",null,null],[17,"SHF_MASKOS","","",null,null],[17,"SHF_MASKPROC","","",null,null],[17,"GRP_COMDAT","","",null,null],[17,"SYMINFO_BT_SELF","","",null,null],[17,"SYMINFO_BT_PARENT","","",null,null],[17,"SYMINFO_BT_LOWRESERVE","","",null,null],[17,"SYMINFO_FLG_DIRECT","","",null,null],[17,"SYMINFO_FLG_PASSTHRU","","",null,null],[17,"SYMINFO_FLG_COPY","","",null,null],[17,"SYMINFO_FLG_LAZYLOAD","","",null,null],[17,"SYMINFO_NONE","","",null,null],[17,"SYMINFO_CURRENT","","",null,null],[17,"SYMINFO_NUM","","",null,null],[17,"STB_LOCAL","","",null,null],[17,"STB_GLOBAL","","",null,null],[17,"STB_WEAK","","",null,null],[17,"STB_NUM","","",null,null],[17,"STB_LOOS","","",null,null],[17,"STB_GNU_UNIQUE","","",null,null],[17,"STB_HIOS","","",null,null],[17,"STB_LOPROC","","",null,null],[17,"STB_HIPROC","","",null,null],[17,"STT_NOTYPE","","",null,null],[17,"STT_OBJECT","","",null,null],[17,"STT_FUNC","","",null,null],[17,"STT_SECTION","","",null,null],[17,"STT_FILE","","",null,null],[17,"STT_COMMON","","",null,null],[17,"STT_TLS","","",null,null],[17,"STT_NUM","","",null,null],[17,"STT_LOOS","","",null,null],[17,"STT_GNU_IFUNC","","",null,null],[17,"STT_HIOS","","",null,null],[17,"STT_LOPROC","","",null,null],[17,"STT_HIPROC","","",null,null],[17,"STN_UNDEF","","",null,null],[17,"STV_DEFAULT","","",null,null],[17,"STV_INTERNAL","","",null,null],[17,"STV_HIDDEN","","",null,null],[17,"STV_PROTECTED","","",null,null],[17,"PN_XNUM","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"PT_LOSUNW","","",null,null],[17,"PT_SUNWBSS","","",null,null],[17,"PT_SUNWSTACK","","",null,null],[17,"PT_HISUNW","","",null,null],[17,"PT_HIOS","","",null,null],[17,"PT_LOPROC","","",null,null],[17,"PT_HIPROC","","",null,null],[17,"PF_MASKOS","","",null,null],[17,"PF_MASKPROC","","",null,null],[17,"NT_PRSTATUS","","",null,null],[17,"NT_FPREGSET","","",null,null],[17,"NT_PRPSINFO","","",null,null],[17,"NT_PRXREG","","",null,null],[17,"NT_TASKSTRUCT","","",null,null],[17,"NT_PLATFORM","","",null,null],[17,"NT_AUXV","","",null,null],[17,"NT_GWINDOWS","","",null,null],[17,"NT_ASRS","","",null,null],[17,"NT_PSTATUS","","",null,null],[17,"NT_PSINFO","","",null,null],[17,"NT_PRCRED","","",null,null],[17,"NT_UTSNAME","","",null,null],[17,"NT_LWPSTATUS","","",null,null],[17,"NT_LWPSINFO","","",null,null],[17,"NT_PRFPXREG","","",null,null],[17,"NT_SIGINFO","","",null,null],[17,"NT_FILE","","",null,null],[17,"NT_PRXFPREG","","",null,null],[17,"NT_PPC_VMX","","",null,null],[17,"NT_PPC_SPE","","",null,null],[17,"NT_PPC_VSX","","",null,null],[17,"NT_386_TLS","","",null,null],[17,"NT_386_IOPERM","","",null,null],[17,"NT_X86_XSTATE","","",null,null],[17,"NT_S390_HIGH_GPRS","","",null,null],[17,"NT_S390_TIMER","","",null,null],[17,"NT_S390_TODCMP","","",null,null],[17,"NT_S390_TODPREG","","",null,null],[17,"NT_S390_CTRS","","",null,null],[17,"NT_S390_PREFIX","","",null,null],[17,"NT_S390_LAST_BREAK","","",null,null],[17,"NT_S390_SYSTEM_CALL","","",null,null],[17,"NT_S390_TDB","","",null,null],[17,"NT_ARM_VFP","","",null,null],[17,"NT_ARM_TLS","","",null,null],[17,"NT_ARM_HW_BREAK","","",null,null],[17,"NT_ARM_HW_WATCH","","",null,null],[17,"NT_VERSION","","",null,null],[17,"DT_NULL","","",null,null],[17,"DT_NEEDED","","",null,null],[17,"DT_PLTRELSZ","","",null,null],[17,"DT_PLTGOT","","",null,null],[17,"DT_HASH","","",null,null],[17,"DT_STRTAB","","",null,null],[17,"DT_SYMTAB","","",null,null],[17,"DT_RELA","","",null,null],[17,"DT_RELASZ","","",null,null],[17,"DT_RELAENT","","",null,null],[17,"DT_STRSZ","","",null,null],[17,"DT_SYMENT","","",null,null],[17,"DT_INIT","","",null,null],[17,"DT_FINI","","",null,null],[17,"DT_SONAME","","",null,null],[17,"DT_RPATH","","",null,null],[17,"DT_SYMBOLIC","","",null,null],[17,"DT_REL","","",null,null],[17,"DT_RELSZ","","",null,null],[17,"DT_RELENT","","",null,null],[17,"DT_PLTREL","","",null,null],[17,"DT_DEBUG","","",null,null],[17,"DT_TEXTREL","","",null,null],[17,"DT_JMPREL","","",null,null],[17,"DT_BIND_NOW","","",null,null],[17,"DT_INIT_ARRAY","","",null,null],[17,"DT_FINI_ARRAY","","",null,null],[17,"DT_INIT_ARRAYSZ","","",null,null],[17,"DT_FINI_ARRAYSZ","","",null,null],[17,"DT_RUNPATH","","",null,null],[17,"DT_FLAGS","","",null,null],[17,"DT_ENCODING","","",null,null],[17,"DT_PREINIT_ARRAY","","",null,null],[17,"DT_PREINIT_ARRAYSZ","","",null,null],[17,"DT_NUM","","",null,null],[17,"DT_LOOS","","",null,null],[17,"DT_HIOS","","",null,null],[17,"DT_LOPROC","","",null,null],[17,"DT_HIPROC","","",null,null],[17,"DT_VALRNGLO","","",null,null],[17,"DT_GNU_PRELINKED","","",null,null],[17,"DT_GNU_CONFLICTSZ","","",null,null],[17,"DT_GNU_LIBLISTSZ","","",null,null],[17,"DT_CHECKSUM","","",null,null],[17,"DT_PLTPADSZ","","",null,null],[17,"DT_MOVEENT","","",null,null],[17,"DT_MOVESZ","","",null,null],[17,"DT_FEATURE_1","","",null,null],[17,"DT_POSFLAG_1","","",null,null],[17,"DT_SYMINSZ","","",null,null],[17,"DT_SYMINENT","","",null,null],[17,"DT_VALRNGHI","","",null,null],[17,"DT_VALNUM","","",null,null],[17,"DT_ADDRRNGLO","","",null,null],[17,"DT_GNU_HASH","","",null,null],[17,"DT_TLSDESC_PLT","","",null,null],[17,"DT_TLSDESC_GOT","","",null,null],[17,"DT_GNU_CONFLICT","","",null,null],[17,"DT_GNU_LIBLIST","","",null,null],[17,"DT_CONFIG","","",null,null],[17,"DT_DEPAUDIT","","",null,null],[17,"DT_AUDIT","","",null,null],[17,"DT_PLTPAD","","",null,null],[17,"DT_MOVETAB","","",null,null],[17,"DT_SYMINFO","","",null,null],[17,"DT_ADDRRNGHI","","",null,null],[17,"DT_ADDRNUM","","",null,null],[17,"DT_VERSYM","","",null,null],[17,"DT_RELACOUNT","","",null,null],[17,"DT_RELCOUNT","","",null,null],[17,"DT_FLAGS_1","","",null,null],[17,"DT_VERDEF","","",null,null],[17,"DT_VERDEFNUM","","",null,null],[17,"DT_VERNEED","","",null,null],[17,"DT_VERNEEDNUM","","",null,null],[17,"DT_VERSIONTAGNUM","","",null,null],[17,"DT_AUXILIARY","","",null,null],[17,"DT_FILTER","","",null,null],[17,"DT_EXTRANUM","","",null,null],[17,"DF_ORIGIN","","",null,null],[17,"DF_SYMBOLIC","","",null,null],[17,"DF_TEXTREL","","",null,null],[17,"DF_BIND_NOW","","",null,null],[17,"DF_STATIC_TLS","","",null,null],[17,"DF_1_NOW","","",null,null],[17,"DF_1_GLOBAL","","",null,null],[17,"DF_1_GROUP","","",null,null],[17,"DF_1_NODELETE","","",null,null],[17,"DF_1_LOADFLTR","","",null,null],[17,"DF_1_INITFIRST","","",null,null],[17,"DF_1_NOOPEN","","",null,null],[17,"DF_1_ORIGIN","","",null,null],[17,"DF_1_DIRECT","","",null,null],[17,"DF_1_TRANS","","",null,null],[17,"DF_1_INTERPOSE","","",null,null],[17,"DF_1_NODEFLIB","","",null,null],[17,"DF_1_NODUMP","","",null,null],[17,"DF_1_CONFALT","","",null,null],[17,"DF_1_ENDFILTEE","","",null,null],[17,"DF_1_DISPRELDNE","","",null,null],[17,"DF_1_DISPRELPND","","",null,null],[17,"DF_1_NODIRECT","","",null,null],[17,"DF_1_IGNMULDEF","","",null,null],[17,"DF_1_NOKSYMS","","",null,null],[17,"DF_1_NOHDR","","",null,null],[17,"DF_1_EDITED","","",null,null],[17,"DF_1_NORELOC","","",null,null],[17,"DF_1_SYMINTPOSE","","",null,null],[17,"DF_1_GLOBAUDIT","","",null,null],[17,"DF_1_SINGLETON","","",null,null],[17,"DTF_1_PARINIT","","",null,null],[17,"DTF_1_CONFEXP","","",null,null],[17,"DF_P1_LAZYLOAD","","",null,null],[17,"DF_P1_GROUPPERM","","",null,null],[17,"VER_DEF_NONE","","",null,null],[17,"VER_DEF_CURRENT","","",null,null],[17,"VER_DEF_NUM","","",null,null],[17,"VER_FLG_BASE","","",null,null],[17,"VER_FLG_WEAK","","",null,null],[17,"VER_NDX_LOCAL","","",null,null],[17,"VER_NDX_GLOBAL","","",null,null],[17,"VER_NDX_LORESERVE","","",null,null],[17,"VER_NDX_ELIMINATE","","",null,null],[17,"VER_NEED_NONE","","",null,null],[17,"VER_NEED_CURRENT","","",null,null],[17,"VER_NEED_NUM","","",null,null],[17,"ELF_NOTE_PAGESIZE_HINT","","",null,null],[17,"NT_GNU_ABI_TAG","","",null,null],[17,"ELF_NOTE_OS_LINUX","","",null,null],[17,"ELF_NOTE_OS_GNU","","",null,null],[17,"ELF_NOTE_OS_SOLARIS2","","",null,null],[17,"ELF_NOTE_OS_FREEBSD","","",null,null],[17,"NT_GNU_HWCAP","","",null,null],[17,"NT_GNU_BUILD_ID","","",null,null],[17,"NT_GNU_GOLD_VERSION","","",null,null],[17,"EF_CPU32","","",null,null],[17,"R_68K_NONE","","",null,null],[17,"R_68K_32","","",null,null],[17,"R_68K_16","","",null,null],[17,"R_68K_8","","",null,null],[17,"R_68K_PC32","","",null,null],[17,"R_68K_PC16","","",null,null],[17,"R_68K_PC8","","",null,null],[17,"R_68K_GOT32","","",null,null],[17,"R_68K_GOT16","","",null,null],[17,"R_68K_GOT8","","",null,null],[17,"R_68K_GOT32O","","",null,null],[17,"R_68K_GOT16O","","",null,null],[17,"R_68K_GOT8O","","",null,null],[17,"R_68K_PLT32","","",null,null],[17,"R_68K_PLT16","","",null,null],[17,"R_68K_PLT8","","",null,null],[17,"R_68K_PLT32O","","",null,null],[17,"R_68K_PLT16O","","",null,null],[17,"R_68K_PLT8O","","",null,null],[17,"R_68K_COPY","","",null,null],[17,"R_68K_GLOB_DAT","","",null,null],[17,"R_68K_JMP_SLOT","","",null,null],[17,"R_68K_RELATIVE","","",null,null],[17,"R_68K_TLS_GD32","","",null,null],[17,"R_68K_TLS_GD16","","",null,null],[17,"R_68K_TLS_GD8","","",null,null],[17,"R_68K_TLS_LDM32","","",null,null],[17,"R_68K_TLS_LDM16","","",null,null],[17,"R_68K_TLS_LDM8","","",null,null],[17,"R_68K_TLS_LDO32","","",null,null],[17,"R_68K_TLS_LDO16","","",null,null],[17,"R_68K_TLS_LDO8","","",null,null],[17,"R_68K_TLS_IE32","","",null,null],[17,"R_68K_TLS_IE16","","",null,null],[17,"R_68K_TLS_IE8","","",null,null],[17,"R_68K_TLS_LE32","","",null,null],[17,"R_68K_TLS_LE16","","",null,null],[17,"R_68K_TLS_LE8","","",null,null],[17,"R_68K_TLS_DTPMOD32","","",null,null],[17,"R_68K_TLS_DTPREL32","","",null,null],[17,"R_68K_TLS_TPREL32","","",null,null],[17,"R_68K_NUM","","",null,null],[17,"R_386_NONE","","",null,null],[17,"R_386_32","","",null,null],[17,"R_386_PC32","","",null,null],[17,"R_386_GOT32","","",null,null],[17,"R_386_PLT32","","",null,null],[17,"R_386_COPY","","",null,null],[17,"R_386_GLOB_DAT","","",null,null],[17,"R_386_JMP_SLOT","","",null,null],[17,"R_386_RELATIVE","","",null,null],[17,"R_386_GOTOFF","","",null,null],[17,"R_386_GOTPC","","",null,null],[17,"R_386_32PLT","","",null,null],[17,"R_386_TLS_TPOFF","","",null,null],[17,"R_386_TLS_IE","","",null,null],[17,"R_386_TLS_GOTIE","","",null,null],[17,"R_386_TLS_LE","","",null,null],[17,"R_386_TLS_GD","","",null,null],[17,"R_386_TLS_LDM","","",null,null],[17,"R_386_16","","",null,null],[17,"R_386_PC16","","",null,null],[17,"R_386_8","","",null,null],[17,"R_386_PC8","","",null,null],[17,"R_386_TLS_GD_32","","",null,null],[17,"R_386_TLS_GD_PUSH","","",null,null],[17,"R_386_TLS_GD_CALL","","",null,null],[17,"R_386_TLS_GD_POP","","",null,null],[17,"R_386_TLS_LDM_32","","",null,null],[17,"R_386_TLS_LDM_PUSH","","",null,null],[17,"R_386_TLS_LDM_CALL","","",null,null],[17,"R_386_TLS_LDM_POP","","",null,null],[17,"R_386_TLS_LDO_32","","",null,null],[17,"R_386_TLS_IE_32","","",null,null],[17,"R_386_TLS_LE_32","","",null,null],[17,"R_386_TLS_DTPMOD32","","",null,null],[17,"R_386_TLS_DTPOFF32","","",null,null],[17,"R_386_TLS_TPOFF32","","",null,null],[17,"R_386_SIZE32","","",null,null],[17,"R_386_TLS_GOTDESC","","",null,null],[17,"R_386_TLS_DESC_CALL","","",null,null],[17,"R_386_TLS_DESC","","",null,null],[17,"R_386_IRELATIVE","","",null,null],[17,"R_386_NUM","","",null,null],[17,"STT_SPARC_REGISTER","","",null,null],[17,"EF_SPARCV9_MM","","",null,null],[17,"EF_SPARCV9_TSO","","",null,null],[17,"EF_SPARCV9_PSO","","",null,null],[17,"EF_SPARCV9_RMO","","",null,null],[17,"EF_SPARC_LEDATA","","",null,null],[17,"EF_SPARC_EXT_MASK","","",null,null],[17,"EF_SPARC_32PLUS","","",null,null],[17,"EF_SPARC_SUN_US1","","",null,null],[17,"EF_SPARC_HAL_R1","","",null,null],[17,"EF_SPARC_SUN_US3","","",null,null],[17,"R_SPARC_NONE","","",null,null],[17,"R_SPARC_8","","",null,null],[17,"R_SPARC_16","","",null,null],[17,"R_SPARC_32","","",null,null],[17,"R_SPARC_DISP8","","",null,null],[17,"R_SPARC_DISP16","","",null,null],[17,"R_SPARC_DISP32","","",null,null],[17,"R_SPARC_WDISP30","","",null,null],[17,"R_SPARC_WDISP22","","",null,null],[17,"R_SPARC_HI22","","",null,null],[17,"R_SPARC_22","","",null,null],[17,"R_SPARC_13","","",null,null],[17,"R_SPARC_LO10","","",null,null],[17,"R_SPARC_GOT10","","",null,null],[17,"R_SPARC_GOT13","","",null,null],[17,"R_SPARC_GOT22","","",null,null],[17,"R_SPARC_PC10","","",null,null],[17,"R_SPARC_PC22","","",null,null],[17,"R_SPARC_WPLT30","","",null,null],[17,"R_SPARC_COPY","","",null,null],[17,"R_SPARC_GLOB_DAT","","",null,null],[17,"R_SPARC_JMP_SLOT","","",null,null],[17,"R_SPARC_RELATIVE","","",null,null],[17,"R_SPARC_UA32","","",null,null],[17,"R_SPARC_PLT32","","",null,null],[17,"R_SPARC_HIPLT22","","",null,null],[17,"R_SPARC_LOPLT10","","",null,null],[17,"R_SPARC_PCPLT32","","",null,null],[17,"R_SPARC_PCPLT22","","",null,null],[17,"R_SPARC_PCPLT10","","",null,null],[17,"R_SPARC_10","","",null,null],[17,"R_SPARC_11","","",null,null],[17,"R_SPARC_64","","",null,null],[17,"R_SPARC_OLO10","","",null,null],[17,"R_SPARC_HH22","","",null,null],[17,"R_SPARC_HM10","","",null,null],[17,"R_SPARC_LM22","","",null,null],[17,"R_SPARC_PC_HH22","","",null,null],[17,"R_SPARC_PC_HM10","","",null,null],[17,"R_SPARC_PC_LM22","","",null,null],[17,"R_SPARC_WDISP16","","",null,null],[17,"R_SPARC_WDISP19","","",null,null],[17,"R_SPARC_GLOB_JMP","","",null,null],[17,"R_SPARC_7","","",null,null],[17,"R_SPARC_5","","",null,null],[17,"R_SPARC_6","","",null,null],[17,"R_SPARC_DISP64","","",null,null],[17,"R_SPARC_PLT64","","",null,null],[17,"R_SPARC_HIX22","","",null,null],[17,"R_SPARC_LOX10","","",null,null],[17,"R_SPARC_H44","","",null,null],[17,"R_SPARC_M44","","",null,null],[17,"R_SPARC_L44","","",null,null],[17,"R_SPARC_REGISTER","","",null,null],[17,"R_SPARC_UA64","","",null,null],[17,"R_SPARC_UA16","","",null,null],[17,"R_SPARC_TLS_GD_HI22","","",null,null],[17,"R_SPARC_TLS_GD_LO10","","",null,null],[17,"R_SPARC_TLS_GD_ADD","","",null,null],[17,"R_SPARC_TLS_GD_CALL","","",null,null],[17,"R_SPARC_TLS_LDM_HI22","","",null,null],[17,"R_SPARC_TLS_LDM_LO10","","",null,null],[17,"R_SPARC_TLS_LDM_ADD","","",null,null],[17,"R_SPARC_TLS_LDM_CALL","","",null,null],[17,"R_SPARC_TLS_LDO_HIX22","","",null,null],[17,"R_SPARC_TLS_LDO_LOX10","","",null,null],[17,"R_SPARC_TLS_LDO_ADD","","",null,null],[17,"R_SPARC_TLS_IE_HI22","","",null,null],[17,"R_SPARC_TLS_IE_LO10","","",null,null],[17,"R_SPARC_TLS_IE_LD","","",null,null],[17,"R_SPARC_TLS_IE_LDX","","",null,null],[17,"R_SPARC_TLS_IE_ADD","","",null,null],[17,"R_SPARC_TLS_LE_HIX22","","",null,null],[17,"R_SPARC_TLS_LE_LOX10","","",null,null],[17,"R_SPARC_TLS_DTPMOD32","","",null,null],[17,"R_SPARC_TLS_DTPMOD64","","",null,null],[17,"R_SPARC_TLS_DTPOFF32","","",null,null],[17,"R_SPARC_TLS_DTPOFF64","","",null,null],[17,"R_SPARC_TLS_TPOFF32","","",null,null],[17,"R_SPARC_TLS_TPOFF64","","",null,null],[17,"R_SPARC_GOTDATA_HIX22","","",null,null],[17,"R_SPARC_GOTDATA_LOX10","","",null,null],[17,"R_SPARC_GOTDATA_OP_HIX22","","",null,null],[17,"R_SPARC_GOTDATA_OP_LOX10","","",null,null],[17,"R_SPARC_GOTDATA_OP","","",null,null],[17,"R_SPARC_H34","","",null,null],[17,"R_SPARC_SIZE32","","",null,null],[17,"R_SPARC_SIZE64","","",null,null],[17,"R_SPARC_WDISP10","","",null,null],[17,"R_SPARC_JMP_IREL","","",null,null],[17,"R_SPARC_IRELATIVE","","",null,null],[17,"R_SPARC_GNU_VTINHERIT","","",null,null],[17,"R_SPARC_GNU_VTENTRY","","",null,null],[17,"R_SPARC_REV32","","",null,null],[17,"R_SPARC_NUM","","",null,null],[17,"DT_SPARC_REGISTER","","",null,null],[17,"DT_SPARC_NUM","","",null,null],[17,"EF_MIPS_NOREORDER","","",null,null],[17,"EF_MIPS_PIC","","",null,null],[17,"EF_MIPS_CPIC","","",null,null],[17,"EF_MIPS_XGOT","","",null,null],[17,"EF_MIPS_64BIT_WHIRL","","",null,null],[17,"EF_MIPS_ABI2","","",null,null],[17,"EF_MIPS_ABI_ON32","","",null,null],[17,"EF_MIPS_NAN2008","","",null,null],[17,"EF_MIPS_ARCH","","",null,null],[17,"EF_MIPS_ARCH_1","","",null,null],[17,"EF_MIPS_ARCH_2","","",null,null],[17,"EF_MIPS_ARCH_3","","",null,null],[17,"EF_MIPS_ARCH_4","","",null,null],[17,"EF_MIPS_ARCH_5","","",null,null],[17,"EF_MIPS_ARCH_32","","",null,null],[17,"EF_MIPS_ARCH_64","","",null,null],[17,"EF_MIPS_ARCH_32R2","","",null,null],[17,"EF_MIPS_ARCH_64R2","","",null,null],[17,"SHN_MIPS_ACOMMON","","",null,null],[17,"SHN_MIPS_TEXT","","",null,null],[17,"SHN_MIPS_DATA","","",null,null],[17,"SHN_MIPS_SCOMMON","","",null,null],[17,"SHN_MIPS_SUNDEFINED","","",null,null],[17,"SHT_MIPS_LIBLIST","","",null,null],[17,"SHT_MIPS_MSYM","","",null,null],[17,"SHT_MIPS_CONFLICT","","",null,null],[17,"SHT_MIPS_GPTAB","","",null,null],[17,"SHT_MIPS_UCODE","","",null,null],[17,"SHT_MIPS_DEBUG","","",null,null],[17,"SHT_MIPS_REGINFO","","",null,null],[17,"SHT_MIPS_PACKAGE","","",null,null],[17,"SHT_MIPS_PACKSYM","","",null,null],[17,"SHT_MIPS_RELD","","",null,null],[17,"SHT_MIPS_IFACE","","",null,null],[17,"SHT_MIPS_CONTENT","","",null,null],[17,"SHT_MIPS_OPTIONS","","",null,null],[17,"SHT_MIPS_SHDR","","",null,null],[17,"SHT_MIPS_FDESC","","",null,null],[17,"SHT_MIPS_EXTSYM","","",null,null],[17,"SHT_MIPS_DENSE","","",null,null],[17,"SHT_MIPS_PDESC","","",null,null],[17,"SHT_MIPS_LOCSYM","","",null,null],[17,"SHT_MIPS_AUXSYM","","",null,null],[17,"SHT_MIPS_OPTSYM","","",null,null],[17,"SHT_MIPS_LOCSTR","","",null,null],[17,"SHT_MIPS_LINE","","",null,null],[17,"SHT_MIPS_RFDESC","","",null,null],[17,"SHT_MIPS_DELTASYM","","",null,null],[17,"SHT_MIPS_DELTAINST","","",null,null],[17,"SHT_MIPS_DELTACLASS","","",null,null],[17,"SHT_MIPS_DWARF","","",null,null],[17,"SHT_MIPS_DELTADECL","","",null,null],[17,"SHT_MIPS_SYMBOL_LIB","","",null,null],[17,"SHT_MIPS_EVENTS","","",null,null],[17,"SHT_MIPS_TRANSLATE","","",null,null],[17,"SHT_MIPS_PIXIE","","",null,null],[17,"SHT_MIPS_XLATE","","",null,null],[17,"SHT_MIPS_XLATE_DEBUG","","",null,null],[17,"SHT_MIPS_WHIRL","","",null,null],[17,"SHT_MIPS_EH_REGION","","",null,null],[17,"SHT_MIPS_XLATE_OLD","","",null,null],[17,"SHT_MIPS_PDR_EXCEPTION","","",null,null],[17,"SHF_MIPS_GPREL","","",null,null],[17,"SHF_MIPS_MERGE","","",null,null],[17,"SHF_MIPS_ADDR","","",null,null],[17,"SHF_MIPS_STRINGS","","",null,null],[17,"SHF_MIPS_NOSTRIP","","",null,null],[17,"SHF_MIPS_LOCAL","","",null,null],[17,"SHF_MIPS_NAMES","","",null,null],[17,"SHF_MIPS_NODUPE","","",null,null],[17,"STO_MIPS_DEFAULT","","",null,null],[17,"STO_MIPS_INTERNAL","","",null,null],[17,"STO_MIPS_HIDDEN","","",null,null],[17,"STO_MIPS_PROTECTED","","",null,null],[17,"STO_MIPS_PLT","","",null,null],[17,"STO_MIPS_SC_ALIGN_UNUSED","","",null,null],[17,"STB_MIPS_SPLIT_COMMON","","",null,null],[17,"ODK_NULL","","",null,null],[17,"ODK_REGINFO","","",null,null],[17,"ODK_EXCEPTIONS","","",null,null],[17,"ODK_PAD","","",null,null],[17,"ODK_HWPATCH","","",null,null],[17,"ODK_FILL","","",null,null],[17,"ODK_TAGS","","",null,null],[17,"ODK_HWAND","","",null,null],[17,"ODK_HWOR","","",null,null],[17,"OEX_FPU_MIN","","",null,null],[17,"OEX_FPU_MAX","","",null,null],[17,"OEX_PAGE0","","",null,null],[17,"OEX_SMM","","",null,null],[17,"OEX_FPDBUG","","",null,null],[17,"OEX_DISMISS","","",null,null],[17,"OEX_FPU_INVAL","","",null,null],[17,"OEX_FPU_DIV0","","",null,null],[17,"OEX_FPU_OFLO","","",null,null],[17,"OEX_FPU_UFLO","","",null,null],[17,"OEX_FPU_INEX","","",null,null],[17,"OHW_R4KEOP","","",null,null],[17,"OHW_R8KPFETCH","","",null,null],[17,"OHW_R5KEOP","","",null,null],[17,"OHW_R5KCVTL","","",null,null],[17,"OPAD_PREFIX","","",null,null],[17,"OPAD_POSTFIX","","",null,null],[17,"OPAD_SYMBOL","","",null,null],[17,"OHWA0_R4KEOP_CHECKED","","",null,null],[17,"OHWA1_R4KEOP_CLEAN","","",null,null],[17,"R_MIPS_NONE","","",null,null],[17,"R_MIPS_16","","",null,null],[17,"R_MIPS_32","","",null,null],[17,"R_MIPS_REL32","","",null,null],[17,"R_MIPS_26","","",null,null],[17,"R_MIPS_HI16","","",null,null],[17,"R_MIPS_LO16","","",null,null],[17,"R_MIPS_GPREL16","","",null,null],[17,"R_MIPS_LITERAL","","",null,null],[17,"R_MIPS_GOT16","","",null,null],[17,"R_MIPS_PC16","","",null,null],[17,"R_MIPS_CALL16","","",null,null],[17,"R_MIPS_GPREL32","","",null,null],[17,"R_MIPS_SHIFT5","","",null,null],[17,"R_MIPS_SHIFT6","","",null,null],[17,"R_MIPS_64","","",null,null],[17,"R_MIPS_GOT_DISP","","",null,null],[17,"R_MIPS_GOT_PAGE","","",null,null],[17,"R_MIPS_GOT_OFST","","",null,null],[17,"R_MIPS_GOT_HI16","","",null,null],[17,"R_MIPS_GOT_LO16","","",null,null],[17,"R_MIPS_SUB","","",null,null],[17,"R_MIPS_INSERT_A","","",null,null],[17,"R_MIPS_INSERT_B","","",null,null],[17,"R_MIPS_DELETE","","",null,null],[17,"R_MIPS_HIGHER","","",null,null],[17,"R_MIPS_HIGHEST","","",null,null],[17,"R_MIPS_CALL_HI16","","",null,null],[17,"R_MIPS_CALL_LO16","","",null,null],[17,"R_MIPS_SCN_DISP","","",null,null],[17,"R_MIPS_REL16","","",null,null],[17,"R_MIPS_ADD_IMMEDIATE","","",null,null],[17,"R_MIPS_PJUMP","","",null,null],[17,"R_MIPS_RELGOT","","",null,null],[17,"R_MIPS_JALR","","",null,null],[17,"R_MIPS_TLS_DTPMOD32","","",null,null],[17,"R_MIPS_TLS_DTPREL32","","",null,null],[17,"R_MIPS_TLS_DTPMOD64","","",null,null],[17,"R_MIPS_TLS_DTPREL64","","",null,null],[17,"R_MIPS_TLS_GD","","",null,null],[17,"R_MIPS_TLS_LDM","","",null,null],[17,"R_MIPS_TLS_DTPREL_HI16","","",null,null],[17,"R_MIPS_TLS_DTPREL_LO16","","",null,null],[17,"R_MIPS_TLS_GOTTPREL","","",null,null],[17,"R_MIPS_TLS_TPREL32","","",null,null],[17,"R_MIPS_TLS_TPREL64","","",null,null],[17,"R_MIPS_TLS_TPREL_HI16","","",null,null],[17,"R_MIPS_TLS_TPREL_LO16","","",null,null],[17,"R_MIPS_GLOB_DAT","","",null,null],[17,"R_MIPS_COPY","","",null,null],[17,"R_MIPS_JUMP_SLOT","","",null,null],[17,"R_MIPS_NUM","","",null,null],[17,"PT_MIPS_REGINFO","","",null,null],[17,"PT_MIPS_RTPROC","","",null,null],[17,"PT_MIPS_OPTIONS","","",null,null],[17,"PF_MIPS_LOCAL","","",null,null],[17,"DT_MIPS_RLD_VERSION","","",null,null],[17,"DT_MIPS_TIME_STAMP","","",null,null],[17,"DT_MIPS_ICHECKSUM","","",null,null],[17,"DT_MIPS_IVERSION","","",null,null],[17,"DT_MIPS_FLAGS","","",null,null],[17,"DT_MIPS_BASE_ADDRESS","","",null,null],[17,"DT_MIPS_MSYM","","",null,null],[17,"DT_MIPS_CONFLICT","","",null,null],[17,"DT_MIPS_LIBLIST","","",null,null],[17,"DT_MIPS_LOCAL_GOTNO","","",null,null],[17,"DT_MIPS_CONFLICTNO","","",null,null],[17,"DT_MIPS_LIBLISTNO","","",null,null],[17,"DT_MIPS_SYMTABNO","","",null,null],[17,"DT_MIPS_UNREFEXTNO","","",null,null],[17,"DT_MIPS_GOTSYM","","",null,null],[17,"DT_MIPS_HIPAGENO","","",null,null],[17,"DT_MIPS_RLD_MAP","","",null,null],[17,"DT_MIPS_DELTA_CLASS","","",null,null],[17,"DT_MIPS_DELTA_CLASS_NO","","",null,null],[17,"DT_MIPS_DELTA_INSTANCE","","",null,null],[17,"DT_MIPS_DELTA_INSTANCE_NO","","",null,null],[17,"DT_MIPS_DELTA_RELOC","","",null,null],[17,"DT_MIPS_DELTA_RELOC_NO","","",null,null],[17,"DT_MIPS_DELTA_SYM","","",null,null],[17,"DT_MIPS_DELTA_SYM_NO","","",null,null],[17,"DT_MIPS_DELTA_CLASSSYM","","",null,null],[17,"DT_MIPS_DELTA_CLASSSYM_NO","","",null,null],[17,"DT_MIPS_CXX_FLAGS","","",null,null],[17,"DT_MIPS_PIXIE_INIT","","",null,null],[17,"DT_MIPS_SYMBOL_LIB","","",null,null],[17,"DT_MIPS_LOCALPAGE_GOTIDX","","",null,null],[17,"DT_MIPS_LOCAL_GOTIDX","","",null,null],[17,"DT_MIPS_HIDDEN_GOTIDX","","",null,null],[17,"DT_MIPS_PROTECTED_GOTIDX","","",null,null],[17,"DT_MIPS_OPTIONS","","",null,null],[17,"DT_MIPS_INTERFACE","","",null,null],[17,"DT_MIPS_DYNSTR_ALIGN","","",null,null],[17,"DT_MIPS_INTERFACE_SIZE","","",null,null],[17,"DT_MIPS_RLD_TEXT_RESOLVE_ADDR","","",null,null],[17,"DT_MIPS_PERF_SUFFIX","","",null,null],[17,"DT_MIPS_COMPACT_SIZE","","",null,null],[17,"DT_MIPS_GP_VALUE","","",null,null],[17,"DT_MIPS_AUX_DYNAMIC","","",null,null],[17,"DT_MIPS_PLTGOT","","",null,null],[17,"DT_MIPS_RWPLT","","",null,null],[17,"DT_MIPS_NUM","","",null,null],[17,"RHF_NONE","","",null,null],[17,"LL_NONE","","",null,null],[17,"EF_PARISC_TRAPNIL","","",null,null],[17,"EF_PARISC_EXT","","",null,null],[17,"EF_PARISC_LSB","","",null,null],[17,"EF_PARISC_WIDE","","",null,null],[17,"EF_PARISC_NO_KABP","","",null,null],[17,"EF_PARISC_LAZYSWAP","","",null,null],[17,"EF_PARISC_ARCH","","",null,null],[17,"EFA_PARISC_1_0","","",null,null],[17,"EFA_PARISC_1_1","","",null,null],[17,"EFA_PARISC_2_0","","",null,null],[17,"SHN_PARISC_ANSI_COMMON","","",null,null],[17,"SHN_PARISC_HUGE_COMMON","","",null,null],[17,"SHT_PARISC_EXT","","",null,null],[17,"SHT_PARISC_UNWIND","","",null,null],[17,"SHT_PARISC_DOC","","",null,null],[17,"SHF_PARISC_SHORT","","",null,null],[17,"SHF_PARISC_HUGE","","",null,null],[17,"SHF_PARISC_SBP","","",null,null],[17,"STT_PARISC_MILLICODE","","",null,null],[17,"R_PARISC_NONE","","",null,null],[17,"R_PARISC_DIR32","","",null,null],[17,"R_PARISC_DIR21L","","",null,null],[17,"R_PARISC_DIR17R","","",null,null],[17,"R_PARISC_DIR17F","","",null,null],[17,"R_PARISC_DIR14R","","",null,null],[17,"R_PARISC_PCREL32","","",null,null],[17,"R_PARISC_PCREL21L","","",null,null],[17,"R_PARISC_PCREL17R","","",null,null],[17,"R_PARISC_PCREL17F","","",null,null],[17,"R_PARISC_PCREL14R","","",null,null],[17,"R_PARISC_DPREL21L","","",null,null],[17,"R_PARISC_DPREL14R","","",null,null],[17,"R_PARISC_GPREL21L","","",null,null],[17,"R_PARISC_GPREL14R","","",null,null],[17,"R_PARISC_LTOFF21L","","",null,null],[17,"R_PARISC_LTOFF14R","","",null,null],[17,"R_PARISC_SECREL32","","",null,null],[17,"R_PARISC_SEGBASE","","",null,null],[17,"R_PARISC_SEGREL32","","",null,null],[17,"R_PARISC_PLTOFF21L","","",null,null],[17,"R_PARISC_PLTOFF14R","","",null,null],[17,"R_PARISC_LTOFF_FPTR32","","",null,null],[17,"R_PARISC_LTOFF_FPTR21L","","",null,null],[17,"R_PARISC_LTOFF_FPTR14R","","",null,null],[17,"R_PARISC_FPTR64","","",null,null],[17,"R_PARISC_PLABEL32","","",null,null],[17,"R_PARISC_PLABEL21L","","",null,null],[17,"R_PARISC_PLABEL14R","","",null,null],[17,"R_PARISC_PCREL64","","",null,null],[17,"R_PARISC_PCREL22F","","",null,null],[17,"R_PARISC_PCREL14WR","","",null,null],[17,"R_PARISC_PCREL14DR","","",null,null],[17,"R_PARISC_PCREL16F","","",null,null],[17,"R_PARISC_PCREL16WF","","",null,null],[17,"R_PARISC_PCREL16DF","","",null,null],[17,"R_PARISC_DIR64","","",null,null],[17,"R_PARISC_DIR14WR","","",null,null],[17,"R_PARISC_DIR14DR","","",null,null],[17,"R_PARISC_DIR16F","","",null,null],[17,"R_PARISC_DIR16WF","","",null,null],[17,"R_PARISC_DIR16DF","","",null,null],[17,"R_PARISC_GPREL64","","",null,null],[17,"R_PARISC_GPREL14WR","","",null,null],[17,"R_PARISC_GPREL14DR","","",null,null],[17,"R_PARISC_GPREL16F","","",null,null],[17,"R_PARISC_GPREL16WF","","",null,null],[17,"R_PARISC_GPREL16DF","","",null,null],[17,"R_PARISC_LTOFF64","","",null,null],[17,"R_PARISC_LTOFF14WR","","",null,null],[17,"R_PARISC_LTOFF14DR","","",null,null],[17,"R_PARISC_LTOFF16F","","",null,null],[17,"R_PARISC_LTOFF16WF","","",null,null],[17,"R_PARISC_LTOFF16DF","","",null,null],[17,"R_PARISC_SECREL64","","",null,null],[17,"R_PARISC_SEGREL64","","",null,null],[17,"R_PARISC_PLTOFF14WR","","",null,null],[17,"R_PARISC_PLTOFF14DR","","",null,null],[17,"R_PARISC_PLTOFF16F","","",null,null],[17,"R_PARISC_PLTOFF16WF","","",null,null],[17,"R_PARISC_PLTOFF16DF","","",null,null],[17,"R_PARISC_LTOFF_FPTR64","","",null,null],[17,"R_PARISC_LTOFF_FPTR14WR","","",null,null],[17,"R_PARISC_LTOFF_FPTR14DR","","",null,null],[17,"R_PARISC_LTOFF_FPTR16F","","",null,null],[17,"R_PARISC_LTOFF_FPTR16WF","","",null,null],[17,"R_PARISC_LTOFF_FPTR16DF","","",null,null],[17,"R_PARISC_LORESERVE","","",null,null],[17,"R_PARISC_COPY","","",null,null],[17,"R_PARISC_IPLT","","",null,null],[17,"R_PARISC_EPLT","","",null,null],[17,"R_PARISC_TPREL32","","",null,null],[17,"R_PARISC_TPREL21L","","",null,null],[17,"R_PARISC_TPREL14R","","",null,null],[17,"R_PARISC_LTOFF_TP21L","","",null,null],[17,"R_PARISC_LTOFF_TP14R","","",null,null],[17,"R_PARISC_LTOFF_TP14F","","",null,null],[17,"R_PARISC_TPREL64","","",null,null],[17,"R_PARISC_TPREL14WR","","",null,null],[17,"R_PARISC_TPREL14DR","","",null,null],[17,"R_PARISC_TPREL16F","","",null,null],[17,"R_PARISC_TPREL16WF","","",null,null],[17,"R_PARISC_TPREL16DF","","",null,null],[17,"R_PARISC_LTOFF_TP64","","",null,null],[17,"R_PARISC_LTOFF_TP14WR","","",null,null],[17,"R_PARISC_LTOFF_TP14DR","","",null,null],[17,"R_PARISC_LTOFF_TP16F","","",null,null],[17,"R_PARISC_LTOFF_TP16WF","","",null,null],[17,"R_PARISC_LTOFF_TP16DF","","",null,null],[17,"R_PARISC_GNU_VTENTRY","","",null,null],[17,"R_PARISC_GNU_VTINHERIT","","",null,null],[17,"R_PARISC_TLS_GD21L","","",null,null],[17,"R_PARISC_TLS_GD14R","","",null,null],[17,"R_PARISC_TLS_GDCALL","","",null,null],[17,"R_PARISC_TLS_LDM21L","","",null,null],[17,"R_PARISC_TLS_LDM14R","","",null,null],[17,"R_PARISC_TLS_LDMCALL","","",null,null],[17,"R_PARISC_TLS_LDO21L","","",null,null],[17,"R_PARISC_TLS_LDO14R","","",null,null],[17,"R_PARISC_TLS_DTPMOD32","","",null,null],[17,"R_PARISC_TLS_DTPMOD64","","",null,null],[17,"R_PARISC_TLS_DTPOFF32","","",null,null],[17,"R_PARISC_TLS_DTPOFF64","","",null,null],[17,"R_PARISC_HIRESERVE","","",null,null],[17,"PT_PARISC_ARCHEXT","","",null,null],[17,"PT_PARISC_UNWIND","","",null,null],[17,"PF_PARISC_SBP","","",null,null],[17,"PF_HP_PAGE_SIZE","","",null,null],[17,"PF_HP_FAR_SHARED","","",null,null],[17,"PF_HP_NEAR_SHARED","","",null,null],[17,"PF_HP_CODE","","",null,null],[17,"PF_HP_MODIFY","","",null,null],[17,"PF_HP_LAZYSWAP","","",null,null],[17,"PF_HP_SBP","","",null,null],[17,"EF_ALPHA_32BIT","","",null,null],[17,"EF_ALPHA_CANRELAX","","",null,null],[17,"SHT_ALPHA_DEBUG","","",null,null],[17,"SHT_ALPHA_REGINFO","","",null,null],[17,"SHF_ALPHA_GPREL","","",null,null],[17,"STO_ALPHA_NOPV","","",null,null],[17,"STO_ALPHA_STD_GPLOAD","","",null,null],[17,"R_ALPHA_NONE","","",null,null],[17,"R_ALPHA_REFLONG","","",null,null],[17,"R_ALPHA_REFQUAD","","",null,null],[17,"R_ALPHA_GPREL32","","",null,null],[17,"R_ALPHA_LITERAL","","",null,null],[17,"R_ALPHA_LITUSE","","",null,null],[17,"R_ALPHA_GPDISP","","",null,null],[17,"R_ALPHA_BRADDR","","",null,null],[17,"R_ALPHA_HINT","","",null,null],[17,"R_ALPHA_SREL16","","",null,null],[17,"R_ALPHA_SREL32","","",null,null],[17,"R_ALPHA_SREL64","","",null,null],[17,"R_ALPHA_GPRELHIGH","","",null,null],[17,"R_ALPHA_GPRELLOW","","",null,null],[17,"R_ALPHA_GPREL16","","",null,null],[17,"R_ALPHA_COPY","","",null,null],[17,"R_ALPHA_GLOB_DAT","","",null,null],[17,"R_ALPHA_JMP_SLOT","","",null,null],[17,"R_ALPHA_RELATIVE","","",null,null],[17,"R_ALPHA_TLS_GD_HI","","",null,null],[17,"R_ALPHA_TLSGD","","",null,null],[17,"R_ALPHA_TLS_LDM","","",null,null],[17,"R_ALPHA_DTPMOD64","","",null,null],[17,"R_ALPHA_GOTDTPREL","","",null,null],[17,"R_ALPHA_DTPREL64","","",null,null],[17,"R_ALPHA_DTPRELHI","","",null,null],[17,"R_ALPHA_DTPRELLO","","",null,null],[17,"R_ALPHA_DTPREL16","","",null,null],[17,"R_ALPHA_GOTTPREL","","",null,null],[17,"R_ALPHA_TPREL64","","",null,null],[17,"R_ALPHA_TPRELHI","","",null,null],[17,"R_ALPHA_TPRELLO","","",null,null],[17,"R_ALPHA_TPREL16","","",null,null],[17,"R_ALPHA_NUM","","",null,null],[17,"LITUSE_ALPHA_ADDR","","",null,null],[17,"LITUSE_ALPHA_BASE","","",null,null],[17,"LITUSE_ALPHA_BYTOFF","","",null,null],[17,"LITUSE_ALPHA_JSR","","",null,null],[17,"LITUSE_ALPHA_TLS_GD","","",null,null],[17,"LITUSE_ALPHA_TLS_LDM","","",null,null],[17,"DT_ALPHA_NUM","","",null,null],[17,"EF_PPC_EMB","","",null,null],[17,"EF_PPC_RELOCATABLE","","",null,null],[17,"EF_PPC_RELOCATABLE_LIB","","",null,null],[17,"R_PPC_NONE","","",null,null],[17,"R_PPC_ADDR32","","",null,null],[17,"R_PPC_ADDR24","","",null,null],[17,"R_PPC_ADDR16","","",null,null],[17,"R_PPC_ADDR16_LO","","",null,null],[17,"R_PPC_ADDR16_HI","","",null,null],[17,"R_PPC_ADDR16_HA","","",null,null],[17,"R_PPC_ADDR14","","",null,null],[17,"R_PPC_ADDR14_BRTAKEN","","",null,null],[17,"R_PPC_ADDR14_BRNTAKEN","","",null,null],[17,"R_PPC_REL24","","",null,null],[17,"R_PPC_REL14","","",null,null],[17,"R_PPC_REL14_BRTAKEN","","",null,null],[17,"R_PPC_REL14_BRNTAKEN","","",null,null],[17,"R_PPC_GOT16","","",null,null],[17,"R_PPC_GOT16_LO","","",null,null],[17,"R_PPC_GOT16_HI","","",null,null],[17,"R_PPC_GOT16_HA","","",null,null],[17,"R_PPC_PLTREL24","","",null,null],[17,"R_PPC_COPY","","",null,null],[17,"R_PPC_GLOB_DAT","","",null,null],[17,"R_PPC_JMP_SLOT","","",null,null],[17,"R_PPC_RELATIVE","","",null,null],[17,"R_PPC_LOCAL24PC","","",null,null],[17,"R_PPC_UADDR32","","",null,null],[17,"R_PPC_UADDR16","","",null,null],[17,"R_PPC_REL32","","",null,null],[17,"R_PPC_PLT32","","",null,null],[17,"R_PPC_PLTREL32","","",null,null],[17,"R_PPC_PLT16_LO","","",null,null],[17,"R_PPC_PLT16_HI","","",null,null],[17,"R_PPC_PLT16_HA","","",null,null],[17,"R_PPC_SDAREL16","","",null,null],[17,"R_PPC_SECTOFF","","",null,null],[17,"R_PPC_SECTOFF_LO","","",null,null],[17,"R_PPC_SECTOFF_HI","","",null,null],[17,"R_PPC_SECTOFF_HA","","",null,null],[17,"R_PPC_TLS","","",null,null],[17,"R_PPC_DTPMOD32","","",null,null],[17,"R_PPC_TPREL16","","",null,null],[17,"R_PPC_TPREL16_LO","","",null,null],[17,"R_PPC_TPREL16_HI","","",null,null],[17,"R_PPC_TPREL16_HA","","",null,null],[17,"R_PPC_TPREL32","","",null,null],[17,"R_PPC_DTPREL16","","",null,null],[17,"R_PPC_DTPREL16_LO","","",null,null],[17,"R_PPC_DTPREL16_HI","","",null,null],[17,"R_PPC_DTPREL16_HA","","",null,null],[17,"R_PPC_DTPREL32","","",null,null],[17,"R_PPC_GOT_TLSGD16","","",null,null],[17,"R_PPC_GOT_TLSGD16_LO","","",null,null],[17,"R_PPC_GOT_TLSGD16_HI","","",null,null],[17,"R_PPC_GOT_TLSGD16_HA","","",null,null],[17,"R_PPC_GOT_TLSLD16","","",null,null],[17,"R_PPC_GOT_TLSLD16_LO","","",null,null],[17,"R_PPC_GOT_TLSLD16_HI","","",null,null],[17,"R_PPC_GOT_TLSLD16_HA","","",null,null],[17,"R_PPC_GOT_TPREL16","","",null,null],[17,"R_PPC_GOT_TPREL16_LO","","",null,null],[17,"R_PPC_GOT_TPREL16_HI","","",null,null],[17,"R_PPC_GOT_TPREL16_HA","","",null,null],[17,"R_PPC_GOT_DTPREL16","","",null,null],[17,"R_PPC_GOT_DTPREL16_LO","","",null,null],[17,"R_PPC_GOT_DTPREL16_HI","","",null,null],[17,"R_PPC_GOT_DTPREL16_HA","","",null,null],[17,"R_PPC_EMB_NADDR32","","",null,null],[17,"R_PPC_EMB_NADDR16","","",null,null],[17,"R_PPC_EMB_NADDR16_LO","","",null,null],[17,"R_PPC_EMB_NADDR16_HI","","",null,null],[17,"R_PPC_EMB_NADDR16_HA","","",null,null],[17,"R_PPC_EMB_SDAI16","","",null,null],[17,"R_PPC_EMB_SDA2I16","","",null,null],[17,"R_PPC_EMB_SDA2REL","","",null,null],[17,"R_PPC_EMB_SDA21","","",null,null],[17,"R_PPC_EMB_MRKREF","","",null,null],[17,"R_PPC_EMB_RELSEC16","","",null,null],[17,"R_PPC_EMB_RELST_LO","","",null,null],[17,"R_PPC_EMB_RELST_HI","","",null,null],[17,"R_PPC_EMB_RELST_HA","","",null,null],[17,"R_PPC_EMB_BIT_FLD","","",null,null],[17,"R_PPC_EMB_RELSDA","","",null,null],[17,"R_PPC_DIAB_SDA21_LO","","",null,null],[17,"R_PPC_DIAB_SDA21_HI","","",null,null],[17,"R_PPC_DIAB_SDA21_HA","","",null,null],[17,"R_PPC_DIAB_RELSDA_LO","","",null,null],[17,"R_PPC_DIAB_RELSDA_HI","","",null,null],[17,"R_PPC_DIAB_RELSDA_HA","","",null,null],[17,"R_PPC_IRELATIVE","","",null,null],[17,"R_PPC_REL16","","",null,null],[17,"R_PPC_REL16_LO","","",null,null],[17,"R_PPC_REL16_HI","","",null,null],[17,"R_PPC_REL16_HA","","",null,null],[17,"R_PPC_TOC16","","",null,null],[17,"DT_PPC_NUM","","",null,null],[17,"R_PPC64_ADDR30","","",null,null],[17,"R_PPC64_ADDR64","","",null,null],[17,"R_PPC64_ADDR16_HIGHER","","",null,null],[17,"R_PPC64_ADDR16_HIGHERA","","",null,null],[17,"R_PPC64_ADDR16_HIGHEST","","",null,null],[17,"R_PPC64_ADDR16_HIGHESTA","","",null,null],[17,"R_PPC64_UADDR64","","",null,null],[17,"R_PPC64_REL64","","",null,null],[17,"R_PPC64_PLT64","","",null,null],[17,"R_PPC64_PLTREL64","","",null,null],[17,"R_PPC64_TOC16","","",null,null],[17,"R_PPC64_TOC16_LO","","",null,null],[17,"R_PPC64_TOC16_HI","","",null,null],[17,"R_PPC64_TOC16_HA","","",null,null],[17,"R_PPC64_TOC","","",null,null],[17,"R_PPC64_PLTGOT16","","",null,null],[17,"R_PPC64_PLTGOT16_LO","","",null,null],[17,"R_PPC64_PLTGOT16_HI","","",null,null],[17,"R_PPC64_PLTGOT16_HA","","",null,null],[17,"R_PPC64_ADDR16_DS","","",null,null],[17,"R_PPC64_ADDR16_LO_DS","","",null,null],[17,"R_PPC64_GOT16_DS","","",null,null],[17,"R_PPC64_GOT16_LO_DS","","",null,null],[17,"R_PPC64_PLT16_LO_DS","","",null,null],[17,"R_PPC64_SECTOFF_DS","","",null,null],[17,"R_PPC64_SECTOFF_LO_DS","","",null,null],[17,"R_PPC64_TOC16_DS","","",null,null],[17,"R_PPC64_TOC16_LO_DS","","",null,null],[17,"R_PPC64_PLTGOT16_DS","","",null,null],[17,"R_PPC64_PLTGOT16_LO_DS","","",null,null],[17,"R_PPC64_TLS","","",null,null],[17,"R_PPC64_DTPMOD64","","",null,null],[17,"R_PPC64_TPREL16","","",null,null],[17,"R_PPC64_TPREL16_LO","","",null,null],[17,"R_PPC64_TPREL16_HI","","",null,null],[17,"R_PPC64_TPREL16_HA","","",null,null],[17,"R_PPC64_TPREL64","","",null,null],[17,"R_PPC64_DTPREL16","","",null,null],[17,"R_PPC64_DTPREL16_LO","","",null,null],[17,"R_PPC64_DTPREL16_HI","","",null,null],[17,"R_PPC64_DTPREL16_HA","","",null,null],[17,"R_PPC64_DTPREL64","","",null,null],[17,"R_PPC64_GOT_TLSGD16","","",null,null],[17,"R_PPC64_GOT_TLSGD16_LO","","",null,null],[17,"R_PPC64_GOT_TLSGD16_HI","","",null,null],[17,"R_PPC64_GOT_TLSGD16_HA","","",null,null],[17,"R_PPC64_GOT_TLSLD16","","",null,null],[17,"R_PPC64_GOT_TLSLD16_LO","","",null,null],[17,"R_PPC64_GOT_TLSLD16_HI","","",null,null],[17,"R_PPC64_GOT_TLSLD16_HA","","",null,null],[17,"R_PPC64_GOT_TPREL16_DS","","",null,null],[17,"R_PPC64_GOT_TPREL16_LO_DS","","",null,null],[17,"R_PPC64_GOT_TPREL16_HI","","",null,null],[17,"R_PPC64_GOT_TPREL16_HA","","",null,null],[17,"R_PPC64_GOT_DTPREL16_DS","","",null,null],[17,"R_PPC64_GOT_DTPREL16_LO_DS","","",null,null],[17,"R_PPC64_GOT_DTPREL16_HI","","",null,null],[17,"R_PPC64_GOT_DTPREL16_HA","","",null,null],[17,"R_PPC64_TPREL16_DS","","",null,null],[17,"R_PPC64_TPREL16_LO_DS","","",null,null],[17,"R_PPC64_TPREL16_HIGHER","","",null,null],[17,"R_PPC64_TPREL16_HIGHERA","","",null,null],[17,"R_PPC64_TPREL16_HIGHEST","","",null,null],[17,"R_PPC64_TPREL16_HIGHESTA","","",null,null],[17,"R_PPC64_DTPREL16_DS","","",null,null],[17,"R_PPC64_DTPREL16_LO_DS","","",null,null],[17,"R_PPC64_DTPREL16_HIGHER","","",null,null],[17,"R_PPC64_DTPREL16_HIGHERA","","",null,null],[17,"R_PPC64_DTPREL16_HIGHEST","","",null,null],[17,"R_PPC64_DTPREL16_HIGHESTA","","",null,null],[17,"R_PPC64_TLSGD","","",null,null],[17,"R_PPC64_TLSLD","","",null,null],[17,"R_PPC64_TOCSAVE","","",null,null],[17,"R_PPC64_ADDR16_HIGH","","",null,null],[17,"R_PPC64_ADDR16_HIGHA","","",null,null],[17,"R_PPC64_TPREL16_HIGH","","",null,null],[17,"R_PPC64_TPREL16_HIGHA","","",null,null],[17,"R_PPC64_DTPREL16_HIGH","","",null,null],[17,"R_PPC64_DTPREL16_HIGHA","","",null,null],[17,"R_PPC64_JMP_IREL","","",null,null],[17,"R_PPC64_IRELATIVE","","",null,null],[17,"R_PPC64_REL16","","",null,null],[17,"R_PPC64_REL16_LO","","",null,null],[17,"R_PPC64_REL16_HI","","",null,null],[17,"R_PPC64_REL16_HA","","",null,null],[17,"EF_PPC64_ABI","","",null,null],[17,"DT_PPC64_NUM","","",null,null],[17,"PPC64_OPT_TLS","","",null,null],[17,"PPC64_OPT_MULTI_TOC","","",null,null],[17,"STO_PPC64_LOCAL_BIT","","",null,null],[17,"EF_ARM_RELEXEC","","",null,null],[17,"EF_ARM_HASENTRY","","",null,null],[17,"EF_ARM_INTERWORK","","",null,null],[17,"EF_ARM_APCS_26","","",null,null],[17,"EF_ARM_APCS_FLOAT","","",null,null],[17,"EF_ARM_PIC","","",null,null],[17,"EF_ARM_ALIGN8","","",null,null],[17,"EF_ARM_NEW_ABI","","",null,null],[17,"EF_ARM_OLD_ABI","","",null,null],[17,"EF_ARM_SOFT_FLOAT","","",null,null],[17,"EF_ARM_VFP_FLOAT","","",null,null],[17,"EF_ARM_MAVERICK_FLOAT","","",null,null],[17,"EF_ARM_ABI_FLOAT_SOFT","","",null,null],[17,"EF_ARM_ABI_FLOAT_HARD","","",null,null],[17,"EF_ARM_SYMSARESORTED","","",null,null],[17,"EF_ARM_DYNSYMSUSESEGIDX","","",null,null],[17,"EF_ARM_MAPSYMSFIRST","","",null,null],[17,"EF_ARM_BE8","","",null,null],[17,"EF_ARM_LE8","","",null,null],[17,"EF_ARM_EABI_UNKNOWN","","",null,null],[17,"EF_ARM_EABI_VER1","","",null,null],[17,"EF_ARM_EABI_VER2","","",null,null],[17,"EF_ARM_EABI_VER3","","",null,null],[17,"EF_ARM_EABI_VER4","","",null,null],[17,"EF_ARM_EABI_VER5","","",null,null],[17,"SHF_ARM_ENTRYSECT","","",null,null],[17,"SHF_ARM_COMDEF","","",null,null],[17,"PF_ARM_SB","","",null,null],[17,"PF_ARM_PI","","",null,null],[17,"PF_ARM_ABS","","",null,null],[17,"R_AARCH64_NONE","","",null,null],[17,"R_AARCH64_ABS64","","",null,null],[17,"R_AARCH64_ABS32","","",null,null],[17,"R_AARCH64_ABS16","","",null,null],[17,"R_AARCH64_PREL64","","",null,null],[17,"R_AARCH64_PREL32","","",null,null],[17,"R_AARCH64_PREL16","","",null,null],[17,"R_AARCH64_MOVW_UABS_G0","","",null,null],[17,"R_AARCH64_MOVW_UABS_G0_NC","","",null,null],[17,"R_AARCH64_MOVW_UABS_G1","","",null,null],[17,"R_AARCH64_MOVW_UABS_G1_NC","","",null,null],[17,"R_AARCH64_MOVW_UABS_G2","","",null,null],[17,"R_AARCH64_MOVW_UABS_G2_NC","","",null,null],[17,"R_AARCH64_MOVW_UABS_G3","","",null,null],[17,"R_AARCH64_MOVW_SABS_G0","","",null,null],[17,"R_AARCH64_MOVW_SABS_G1","","",null,null],[17,"R_AARCH64_MOVW_SABS_G2","","",null,null],[17,"R_AARCH64_LD_PREL_LO19","","",null,null],[17,"R_AARCH64_ADR_PREL_LO21","","",null,null],[17,"R_AARCH64_ADR_PREL_PG_HI21","","",null,null],[17,"R_AARCH64_ADR_PREL_PG_HI21_NC","","",null,null],[17,"R_AARCH64_ADD_ABS_LO12_NC","","",null,null],[17,"R_AARCH64_LDST8_ABS_LO12_NC","","",null,null],[17,"R_AARCH64_TSTBR14","","",null,null],[17,"R_AARCH64_CONDBR19","","",null,null],[17,"R_AARCH64_JUMP26","","",null,null],[17,"R_AARCH64_CALL26","","",null,null],[17,"R_AARCH64_LDST16_ABS_LO12_NC","","",null,null],[17,"R_AARCH64_LDST32_ABS_LO12_NC","","",null,null],[17,"R_AARCH64_LDST64_ABS_LO12_NC","","",null,null],[17,"R_AARCH64_MOVW_PREL_G0","","",null,null],[17,"R_AARCH64_MOVW_PREL_G0_NC","","",null,null],[17,"R_AARCH64_MOVW_PREL_G1","","",null,null],[17,"R_AARCH64_MOVW_PREL_G1_NC","","",null,null],[17,"R_AARCH64_MOVW_PREL_G2","","",null,null],[17,"R_AARCH64_MOVW_PREL_G2_NC","","",null,null],[17,"R_AARCH64_MOVW_PREL_G3","","",null,null],[17,"R_AARCH64_LDST128_ABS_LO12_NC","","",null,null],[17,"R_AARCH64_MOVW_GOTOFF_G0","","",null,null],[17,"R_AARCH64_MOVW_GOTOFF_G0_NC","","",null,null],[17,"R_AARCH64_MOVW_GOTOFF_G1","","",null,null],[17,"R_AARCH64_MOVW_GOTOFF_G1_NC","","",null,null],[17,"R_AARCH64_MOVW_GOTOFF_G2","","",null,null],[17,"R_AARCH64_MOVW_GOTOFF_G2_NC","","",null,null],[17,"R_AARCH64_MOVW_GOTOFF_G3","","",null,null],[17,"R_AARCH64_GOTREL64","","",null,null],[17,"R_AARCH64_GOTREL32","","",null,null],[17,"R_AARCH64_GOT_LD_PREL19","","",null,null],[17,"R_AARCH64_LD64_GOTOFF_LO15","","",null,null],[17,"R_AARCH64_ADR_GOT_PAGE","","",null,null],[17,"R_AARCH64_LD64_GOT_LO12_NC","","",null,null],[17,"R_AARCH64_LD64_GOTPAGE_LO15","","",null,null],[17,"R_AARCH64_TLSGD_ADR_PREL21","","",null,null],[17,"R_AARCH64_TLSGD_ADR_PAGE21","","",null,null],[17,"R_AARCH64_TLSGD_ADD_LO12_NC","","",null,null],[17,"R_AARCH64_TLSGD_MOVW_G1","","",null,null],[17,"R_AARCH64_TLSGD_MOVW_G0_NC","","",null,null],[17,"R_AARCH64_TLSLD_ADR_PREL21","","",null,null],[17,"R_AARCH64_TLSLD_ADR_PAGE21","","",null,null],[17,"R_AARCH64_TLSLD_ADD_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLD_MOVW_G1","","",null,null],[17,"R_AARCH64_TLSLD_MOVW_G0_NC","","",null,null],[17,"R_AARCH64_TLSLD_LD_PREL19","","",null,null],[17,"R_AARCH64_TLSLD_MOVW_DTPREL_G2","","",null,null],[17,"R_AARCH64_TLSLD_MOVW_DTPREL_G1","","",null,null],[17,"R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC","","",null,null],[17,"R_AARCH64_TLSLD_MOVW_DTPREL_G0","","",null,null],[17,"R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC","","",null,null],[17,"R_AARCH64_TLSLD_ADD_DTPREL_HI12","","",null,null],[17,"R_AARCH64_TLSLD_ADD_DTPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLD_LDST8_DTPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLD_LDST16_DTPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLD_LDST32_DTPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLD_LDST64_DTPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSIE_MOVW_GOTTPREL_G1","","",null,null],[17,"R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC","","",null,null],[17,"R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21","","",null,null],[17,"R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSIE_LD_GOTTPREL_PREL19","","",null,null],[17,"R_AARCH64_TLSLE_MOVW_TPREL_G2","","",null,null],[17,"R_AARCH64_TLSLE_MOVW_TPREL_G1","","",null,null],[17,"R_AARCH64_TLSLE_MOVW_TPREL_G1_NC","","",null,null],[17,"R_AARCH64_TLSLE_MOVW_TPREL_G0","","",null,null],[17,"R_AARCH64_TLSLE_MOVW_TPREL_G0_NC","","",null,null],[17,"R_AARCH64_TLSLE_ADD_TPREL_HI12","","",null,null],[17,"R_AARCH64_TLSLE_ADD_TPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLE_ADD_TPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLE_LDST8_TPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLE_LDST16_TPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLE_LDST32_TPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLE_LDST64_TPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSDESC_LD_PREL19","","",null,null],[17,"R_AARCH64_TLSDESC_ADR_PREL21","","",null,null],[17,"R_AARCH64_TLSDESC_ADR_PAGE21","","",null,null],[17,"R_AARCH64_TLSDESC_LD64_LO12","","",null,null],[17,"R_AARCH64_TLSDESC_ADD_LO12","","",null,null],[17,"R_AARCH64_TLSDESC_OFF_G1","","",null,null],[17,"R_AARCH64_TLSDESC_OFF_G0_NC","","",null,null],[17,"R_AARCH64_TLSDESC_LDR","","",null,null],[17,"R_AARCH64_TLSDESC_ADD","","",null,null],[17,"R_AARCH64_TLSDESC_CALL","","",null,null],[17,"R_AARCH64_TLSLE_LDST128_TPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC","","",null,null],[17,"R_AARCH64_TLSLD_LDST128_DTPREL_LO12","","",null,null],[17,"R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC","","",null,null],[17,"R_AARCH64_COPY","","",null,null],[17,"R_AARCH64_GLOB_DAT","","",null,null],[17,"R_AARCH64_JUMP_SLOT","","",null,null],[17,"R_AARCH64_RELATIVE","","",null,null],[17,"R_AARCH64_TLS_DTPMOD64","","",null,null],[17,"R_AARCH64_TLS_DTPREL64","","",null,null],[17,"R_AARCH64_TLS_TPREL64","","",null,null],[17,"R_AARCH64_TLSDESC","","",null,null],[17,"R_AARCH64_IRELATIVE","","",null,null],[17,"R_ARM_NONE","","",null,null],[17,"R_ARM_PC24","","",null,null],[17,"R_ARM_ABS32","","",null,null],[17,"R_ARM_REL32","","",null,null],[17,"R_ARM_PC13","","",null,null],[17,"R_ARM_ABS16","","",null,null],[17,"R_ARM_ABS12","","",null,null],[17,"R_ARM_THM_ABS5","","",null,null],[17,"R_ARM_ABS8","","",null,null],[17,"R_ARM_SBREL32","","",null,null],[17,"R_ARM_THM_PC22","","",null,null],[17,"R_ARM_THM_PC8","","",null,null],[17,"R_ARM_AMP_VCALL9","","",null,null],[17,"R_ARM_SWI24","","",null,null],[17,"R_ARM_TLS_DESC","","",null,null],[17,"R_ARM_THM_SWI8","","",null,null],[17,"R_ARM_XPC25","","",null,null],[17,"R_ARM_THM_XPC22","","",null,null],[17,"R_ARM_TLS_DTPMOD32","","",null,null],[17,"R_ARM_TLS_DTPOFF32","","",null,null],[17,"R_ARM_TLS_TPOFF32","","",null,null],[17,"R_ARM_COPY","","",null,null],[17,"R_ARM_GLOB_DAT","","",null,null],[17,"R_ARM_JUMP_SLOT","","",null,null],[17,"R_ARM_RELATIVE","","",null,null],[17,"R_ARM_GOTOFF","","",null,null],[17,"R_ARM_GOTPC","","",null,null],[17,"R_ARM_GOT32","","",null,null],[17,"R_ARM_PLT32","","",null,null],[17,"R_ARM_CALL","","",null,null],[17,"R_ARM_JUMP24","","",null,null],[17,"R_ARM_THM_JUMP24","","",null,null],[17,"R_ARM_BASE_ABS","","",null,null],[17,"R_ARM_ALU_PCREL_7_0","","",null,null],[17,"R_ARM_ALU_PCREL_15_8","","",null,null],[17,"R_ARM_ALU_PCREL_23_15","","",null,null],[17,"R_ARM_LDR_SBREL_11_0","","",null,null],[17,"R_ARM_ALU_SBREL_19_12","","",null,null],[17,"R_ARM_ALU_SBREL_27_20","","",null,null],[17,"R_ARM_TARGET1","","",null,null],[17,"R_ARM_SBREL31","","",null,null],[17,"R_ARM_V4BX","","",null,null],[17,"R_ARM_TARGET2","","",null,null],[17,"R_ARM_PREL31","","",null,null],[17,"R_ARM_MOVW_ABS_NC","","",null,null],[17,"R_ARM_MOVT_ABS","","",null,null],[17,"R_ARM_MOVW_PREL_NC","","",null,null],[17,"R_ARM_MOVT_PREL","","",null,null],[17,"R_ARM_THM_MOVW_ABS_NC","","",null,null],[17,"R_ARM_THM_MOVT_ABS","","",null,null],[17,"R_ARM_THM_MOVW_PREL_NC","","",null,null],[17,"R_ARM_THM_MOVT_PREL","","",null,null],[17,"R_ARM_THM_JUMP19","","",null,null],[17,"R_ARM_THM_JUMP6","","",null,null],[17,"R_ARM_THM_ALU_PREL_11_0","","",null,null],[17,"R_ARM_THM_PC12","","",null,null],[17,"R_ARM_ABS32_NOI","","",null,null],[17,"R_ARM_REL32_NOI","","",null,null],[17,"R_ARM_ALU_PC_G0_NC","","",null,null],[17,"R_ARM_ALU_PC_G0","","",null,null],[17,"R_ARM_ALU_PC_G1_NC","","",null,null],[17,"R_ARM_ALU_PC_G1","","",null,null],[17,"R_ARM_ALU_PC_G2","","",null,null],[17,"R_ARM_LDR_PC_G1","","",null,null],[17,"R_ARM_LDR_PC_G2","","",null,null],[17,"R_ARM_LDRS_PC_G0","","",null,null],[17,"R_ARM_LDRS_PC_G1","","",null,null],[17,"R_ARM_LDRS_PC_G2","","",null,null],[17,"R_ARM_LDC_PC_G0","","",null,null],[17,"R_ARM_LDC_PC_G1","","",null,null],[17,"R_ARM_LDC_PC_G2","","",null,null],[17,"R_ARM_ALU_SB_G0_NC","","",null,null],[17,"R_ARM_ALU_SB_G0","","",null,null],[17,"R_ARM_ALU_SB_G1_NC","","",null,null],[17,"R_ARM_ALU_SB_G1","","",null,null],[17,"R_ARM_ALU_SB_G2","","",null,null],[17,"R_ARM_LDR_SB_G0","","",null,null],[17,"R_ARM_LDR_SB_G1","","",null,null],[17,"R_ARM_LDR_SB_G2","","",null,null],[17,"R_ARM_LDRS_SB_G0","","",null,null],[17,"R_ARM_LDRS_SB_G1","","",null,null],[17,"R_ARM_LDRS_SB_G2","","",null,null],[17,"R_ARM_LDC_SB_G0","","",null,null],[17,"R_ARM_LDC_SB_G1","","",null,null],[17,"R_ARM_LDC_SB_G2","","",null,null],[17,"R_ARM_MOVW_BREL_NC","","",null,null],[17,"R_ARM_MOVT_BREL","","",null,null],[17,"R_ARM_MOVW_BREL","","",null,null],[17,"R_ARM_THM_MOVW_BREL_NC","","",null,null],[17,"R_ARM_THM_MOVT_BREL","","",null,null],[17,"R_ARM_THM_MOVW_BREL","","",null,null],[17,"R_ARM_TLS_GOTDESC","","",null,null],[17,"R_ARM_TLS_CALL","","",null,null],[17,"R_ARM_TLS_DESCSEQ","","",null,null],[17,"R_ARM_THM_TLS_CALL","","",null,null],[17,"R_ARM_PLT32_ABS","","",null,null],[17,"R_ARM_GOT_ABS","","",null,null],[17,"R_ARM_GOT_PREL","","",null,null],[17,"R_ARM_GOT_BREL12","","",null,null],[17,"R_ARM_GOTOFF12","","",null,null],[17,"R_ARM_GOTRELAX","","",null,null],[17,"R_ARM_GNU_VTENTRY","","",null,null],[17,"R_ARM_GNU_VTINHERIT","","",null,null],[17,"R_ARM_THM_PC11","","",null,null],[17,"R_ARM_THM_PC9","","",null,null],[17,"R_ARM_TLS_GD32","","",null,null],[17,"R_ARM_TLS_LDM32","","",null,null],[17,"R_ARM_TLS_LDO32","","",null,null],[17,"R_ARM_TLS_IE32","","",null,null],[17,"R_ARM_TLS_LE32","","",null,null],[17,"R_ARM_TLS_LDO12","","",null,null],[17,"R_ARM_TLS_LE12","","",null,null],[17,"R_ARM_TLS_IE12GP","","",null,null],[17,"R_ARM_ME_TOO","","",null,null],[17,"R_ARM_THM_TLS_DESCSEQ","","",null,null],[17,"R_ARM_THM_TLS_DESCSEQ16","","",null,null],[17,"R_ARM_THM_TLS_DESCSEQ32","","",null,null],[17,"R_ARM_THM_GOT_BREL12","","",null,null],[17,"R_ARM_IRELATIVE","","",null,null],[17,"R_ARM_RXPC25","","",null,null],[17,"R_ARM_RSBREL32","","",null,null],[17,"R_ARM_THM_RPC22","","",null,null],[17,"R_ARM_RREL32","","",null,null],[17,"R_ARM_RABS22","","",null,null],[17,"R_ARM_RPC24","","",null,null],[17,"R_ARM_RBASE","","",null,null],[17,"R_ARM_NUM","","",null,null],[17,"EF_IA_64_MASKOS","","",null,null],[17,"EF_IA_64_ABI64","","",null,null],[17,"EF_IA_64_ARCH","","",null,null],[17,"PF_IA_64_NORECOV","","",null,null],[17,"SHF_IA_64_SHORT","","",null,null],[17,"SHF_IA_64_NORECOV","","",null,null],[17,"DT_IA_64_NUM","","",null,null],[17,"R_IA64_NONE","","",null,null],[17,"R_IA64_IMM14","","",null,null],[17,"R_IA64_IMM22","","",null,null],[17,"R_IA64_IMM64","","",null,null],[17,"R_IA64_DIR32MSB","","",null,null],[17,"R_IA64_DIR32LSB","","",null,null],[17,"R_IA64_DIR64MSB","","",null,null],[17,"R_IA64_DIR64LSB","","",null,null],[17,"R_IA64_GPREL22","","",null,null],[17,"R_IA64_GPREL64I","","",null,null],[17,"R_IA64_GPREL32MSB","","",null,null],[17,"R_IA64_GPREL32LSB","","",null,null],[17,"R_IA64_GPREL64MSB","","",null,null],[17,"R_IA64_GPREL64LSB","","",null,null],[17,"R_IA64_LTOFF22","","",null,null],[17,"R_IA64_LTOFF64I","","",null,null],[17,"R_IA64_PLTOFF22","","",null,null],[17,"R_IA64_PLTOFF64I","","",null,null],[17,"R_IA64_PLTOFF64MSB","","",null,null],[17,"R_IA64_PLTOFF64LSB","","",null,null],[17,"R_IA64_FPTR64I","","",null,null],[17,"R_IA64_FPTR32MSB","","",null,null],[17,"R_IA64_FPTR32LSB","","",null,null],[17,"R_IA64_FPTR64MSB","","",null,null],[17,"R_IA64_FPTR64LSB","","",null,null],[17,"R_IA64_PCREL60B","","",null,null],[17,"R_IA64_PCREL21B","","",null,null],[17,"R_IA64_PCREL21M","","",null,null],[17,"R_IA64_PCREL21F","","",null,null],[17,"R_IA64_PCREL32MSB","","",null,null],[17,"R_IA64_PCREL32LSB","","",null,null],[17,"R_IA64_PCREL64MSB","","",null,null],[17,"R_IA64_PCREL64LSB","","",null,null],[17,"R_IA64_LTOFF_FPTR22","","",null,null],[17,"R_IA64_LTOFF_FPTR64I","","",null,null],[17,"R_IA64_LTOFF_FPTR32MSB","","",null,null],[17,"R_IA64_LTOFF_FPTR32LSB","","",null,null],[17,"R_IA64_LTOFF_FPTR64MSB","","",null,null],[17,"R_IA64_LTOFF_FPTR64LSB","","",null,null],[17,"R_IA64_SEGREL32MSB","","",null,null],[17,"R_IA64_SEGREL32LSB","","",null,null],[17,"R_IA64_SEGREL64MSB","","",null,null],[17,"R_IA64_SEGREL64LSB","","",null,null],[17,"R_IA64_SECREL32MSB","","",null,null],[17,"R_IA64_SECREL32LSB","","",null,null],[17,"R_IA64_SECREL64MSB","","",null,null],[17,"R_IA64_SECREL64LSB","","",null,null],[17,"R_IA64_REL32MSB","","",null,null],[17,"R_IA64_REL32LSB","","",null,null],[17,"R_IA64_REL64MSB","","",null,null],[17,"R_IA64_REL64LSB","","",null,null],[17,"R_IA64_LTV32MSB","","",null,null],[17,"R_IA64_LTV32LSB","","",null,null],[17,"R_IA64_LTV64MSB","","",null,null],[17,"R_IA64_LTV64LSB","","",null,null],[17,"R_IA64_PCREL21BI","","",null,null],[17,"R_IA64_PCREL22","","",null,null],[17,"R_IA64_PCREL64I","","",null,null],[17,"R_IA64_IPLTMSB","","",null,null],[17,"R_IA64_IPLTLSB","","",null,null],[17,"R_IA64_COPY","","",null,null],[17,"R_IA64_SUB","","",null,null],[17,"R_IA64_LTOFF22X","","",null,null],[17,"R_IA64_LDXMOV","","",null,null],[17,"R_IA64_TPREL14","","",null,null],[17,"R_IA64_TPREL22","","",null,null],[17,"R_IA64_TPREL64I","","",null,null],[17,"R_IA64_TPREL64MSB","","",null,null],[17,"R_IA64_TPREL64LSB","","",null,null],[17,"R_IA64_LTOFF_TPREL22","","",null,null],[17,"R_IA64_DTPMOD64MSB","","",null,null],[17,"R_IA64_DTPMOD64LSB","","",null,null],[17,"R_IA64_LTOFF_DTPMOD22","","",null,null],[17,"R_IA64_DTPREL14","","",null,null],[17,"R_IA64_DTPREL22","","",null,null],[17,"R_IA64_DTPREL64I","","",null,null],[17,"R_IA64_DTPREL32MSB","","",null,null],[17,"R_IA64_DTPREL32LSB","","",null,null],[17,"R_IA64_DTPREL64MSB","","",null,null],[17,"R_IA64_DTPREL64LSB","","",null,null],[17,"R_IA64_LTOFF_DTPREL22","","",null,null],[17,"EF_SH_MACH_MASK","","",null,null],[17,"EF_SH_UNKNOWN","","",null,null],[17,"EF_SH1","","",null,null],[17,"EF_SH2","","",null,null],[17,"EF_SH3","","",null,null],[17,"EF_SH_DSP","","",null,null],[17,"EF_SH3_DSP","","",null,null],[17,"EF_SH4AL_DSP","","",null,null],[17,"EF_SH3E","","",null,null],[17,"EF_SH4","","",null,null],[17,"EF_SH2E","","",null,null],[17,"EF_SH4A","","",null,null],[17,"EF_SH2A","","",null,null],[17,"EF_SH4_NOFPU","","",null,null],[17,"EF_SH4A_NOFPU","","",null,null],[17,"EF_SH4_NOMMU_NOFPU","","",null,null],[17,"EF_SH2A_NOFPU","","",null,null],[17,"EF_SH3_NOMMU","","",null,null],[17,"EF_SH2A_SH4_NOFPU","","",null,null],[17,"EF_SH2A_SH3_NOFPU","","",null,null],[17,"EF_SH2A_SH4","","",null,null],[17,"EF_SH2A_SH3E","","",null,null],[17,"R_SH_NONE","","",null,null],[17,"R_SH_DIR32","","",null,null],[17,"R_SH_REL32","","",null,null],[17,"R_SH_DIR8WPN","","",null,null],[17,"R_SH_IND12W","","",null,null],[17,"R_SH_DIR8WPL","","",null,null],[17,"R_SH_DIR8WPZ","","",null,null],[17,"R_SH_DIR8BP","","",null,null],[17,"R_SH_DIR8W","","",null,null],[17,"R_SH_DIR8L","","",null,null],[17,"R_SH_SWITCH16","","",null,null],[17,"R_SH_SWITCH32","","",null,null],[17,"R_SH_USES","","",null,null],[17,"R_SH_COUNT","","",null,null],[17,"R_SH_ALIGN","","",null,null],[17,"R_SH_CODE","","",null,null],[17,"R_SH_DATA","","",null,null],[17,"R_SH_LABEL","","",null,null],[17,"R_SH_SWITCH8","","",null,null],[17,"R_SH_GNU_VTINHERIT","","",null,null],[17,"R_SH_GNU_VTENTRY","","",null,null],[17,"R_SH_TLS_GD_32","","",null,null],[17,"R_SH_TLS_LD_32","","",null,null],[17,"R_SH_TLS_LDO_32","","",null,null],[17,"R_SH_TLS_IE_32","","",null,null],[17,"R_SH_TLS_LE_32","","",null,null],[17,"R_SH_TLS_DTPMOD32","","",null,null],[17,"R_SH_TLS_DTPOFF32","","",null,null],[17,"R_SH_TLS_TPOFF32","","",null,null],[17,"R_SH_GOT32","","",null,null],[17,"R_SH_PLT32","","",null,null],[17,"R_SH_COPY","","",null,null],[17,"R_SH_GLOB_DAT","","",null,null],[17,"R_SH_JMP_SLOT","","",null,null],[17,"R_SH_RELATIVE","","",null,null],[17,"R_SH_GOTOFF","","",null,null],[17,"R_SH_GOTPC","","",null,null],[17,"R_SH_NUM","","",null,null],[17,"EF_S390_HIGH_GPRS","","",null,null],[17,"R_390_NONE","","",null,null],[17,"R_390_8","","",null,null],[17,"R_390_12","","",null,null],[17,"R_390_16","","",null,null],[17,"R_390_32","","",null,null],[17,"R_390_PC32","","",null,null],[17,"R_390_GOT12","","",null,null],[17,"R_390_GOT32","","",null,null],[17,"R_390_PLT32","","",null,null],[17,"R_390_COPY","","",null,null],[17,"R_390_GLOB_DAT","","",null,null],[17,"R_390_JMP_SLOT","","",null,null],[17,"R_390_RELATIVE","","",null,null],[17,"R_390_GOTOFF32","","",null,null],[17,"R_390_GOTPC","","",null,null],[17,"R_390_GOT16","","",null,null],[17,"R_390_PC16","","",null,null],[17,"R_390_PC16DBL","","",null,null],[17,"R_390_PLT16DBL","","",null,null],[17,"R_390_PC32DBL","","",null,null],[17,"R_390_PLT32DBL","","",null,null],[17,"R_390_GOTPCDBL","","",null,null],[17,"R_390_64","","",null,null],[17,"R_390_PC64","","",null,null],[17,"R_390_GOT64","","",null,null],[17,"R_390_PLT64","","",null,null],[17,"R_390_GOTENT","","",null,null],[17,"R_390_GOTOFF16","","",null,null],[17,"R_390_GOTOFF64","","",null,null],[17,"R_390_GOTPLT12","","",null,null],[17,"R_390_GOTPLT16","","",null,null],[17,"R_390_GOTPLT32","","",null,null],[17,"R_390_GOTPLT64","","",null,null],[17,"R_390_GOTPLTENT","","",null,null],[17,"R_390_PLTOFF16","","",null,null],[17,"R_390_PLTOFF32","","",null,null],[17,"R_390_PLTOFF64","","",null,null],[17,"R_390_TLS_LOAD","","",null,null],[17,"R_390_TLS_GDCALL","","",null,null],[17,"R_390_TLS_LDCALL","","",null,null],[17,"R_390_TLS_GD32","","",null,null],[17,"R_390_TLS_GD64","","",null,null],[17,"R_390_TLS_GOTIE12","","",null,null],[17,"R_390_TLS_GOTIE32","","",null,null],[17,"R_390_TLS_GOTIE64","","",null,null],[17,"R_390_TLS_LDM32","","",null,null],[17,"R_390_TLS_LDM64","","",null,null],[17,"R_390_TLS_IE32","","",null,null],[17,"R_390_TLS_IE64","","",null,null],[17,"R_390_TLS_IEENT","","",null,null],[17,"R_390_TLS_LE32","","",null,null],[17,"R_390_TLS_LE64","","",null,null],[17,"R_390_TLS_LDO32","","",null,null],[17,"R_390_TLS_LDO64","","",null,null],[17,"R_390_TLS_DTPMOD","","",null,null],[17,"R_390_TLS_DTPOFF","","",null,null],[17,"R_390_TLS_TPOFF","","",null,null],[17,"R_390_20","","",null,null],[17,"R_390_GOT20","","",null,null],[17,"R_390_GOTPLT20","","",null,null],[17,"R_390_TLS_GOTIE20","","",null,null],[17,"R_390_IRELATIVE","","",null,null],[17,"R_390_NUM","","",null,null],[17,"R_CRIS_NONE","","",null,null],[17,"R_CRIS_8","","",null,null],[17,"R_CRIS_16","","",null,null],[17,"R_CRIS_32","","",null,null],[17,"R_CRIS_8_PCREL","","",null,null],[17,"R_CRIS_16_PCREL","","",null,null],[17,"R_CRIS_32_PCREL","","",null,null],[17,"R_CRIS_GNU_VTINHERIT","","",null,null],[17,"R_CRIS_GNU_VTENTRY","","",null,null],[17,"R_CRIS_COPY","","",null,null],[17,"R_CRIS_GLOB_DAT","","",null,null],[17,"R_CRIS_JUMP_SLOT","","",null,null],[17,"R_CRIS_RELATIVE","","",null,null],[17,"R_CRIS_16_GOT","","",null,null],[17,"R_CRIS_32_GOT","","",null,null],[17,"R_CRIS_16_GOTPLT","","",null,null],[17,"R_CRIS_32_GOTPLT","","",null,null],[17,"R_CRIS_32_GOTREL","","",null,null],[17,"R_CRIS_32_PLT_GOTREL","","",null,null],[17,"R_CRIS_32_PLT_PCREL","","",null,null],[17,"R_CRIS_NUM","","",null,null],[17,"R_X86_64_NONE","","",null,null],[17,"R_X86_64_64","","",null,null],[17,"R_X86_64_PC32","","",null,null],[17,"R_X86_64_GOT32","","",null,null],[17,"R_X86_64_PLT32","","",null,null],[17,"R_X86_64_COPY","","",null,null],[17,"R_X86_64_GLOB_DAT","","",null,null],[17,"R_X86_64_JUMP_SLOT","","",null,null],[17,"R_X86_64_RELATIVE","","",null,null],[17,"R_X86_64_GOTPCREL","","",null,null],[17,"R_X86_64_32","","",null,null],[17,"R_X86_64_32S","","",null,null],[17,"R_X86_64_16","","",null,null],[17,"R_X86_64_PC16","","",null,null],[17,"R_X86_64_8","","",null,null],[17,"R_X86_64_PC8","","",null,null],[17,"R_X86_64_DTPMOD64","","",null,null],[17,"R_X86_64_DTPOFF64","","",null,null],[17,"R_X86_64_TPOFF64","","",null,null],[17,"R_X86_64_TLSGD","","",null,null],[17,"R_X86_64_TLSLD","","",null,null],[17,"R_X86_64_DTPOFF32","","",null,null],[17,"R_X86_64_GOTTPOFF","","",null,null],[17,"R_X86_64_TPOFF32","","",null,null],[17,"R_X86_64_PC64","","",null,null],[17,"R_X86_64_GOTOFF64","","",null,null],[17,"R_X86_64_GOTPC32","","",null,null],[17,"R_X86_64_GOT64","","",null,null],[17,"R_X86_64_GOTPCREL64","","",null,null],[17,"R_X86_64_GOTPC64","","",null,null],[17,"R_X86_64_GOTPLT64","","",null,null],[17,"R_X86_64_PLTOFF64","","",null,null],[17,"R_X86_64_SIZE32","","",null,null],[17,"R_X86_64_SIZE64","","",null,null],[17,"R_X86_64_GOTPC32_TLSDESC","","",null,null],[17,"R_X86_64_TLSDESC_CALL","","",null,null],[17,"R_X86_64_TLSDESC","","",null,null],[17,"R_X86_64_IRELATIVE","","",null,null],[17,"R_X86_64_RELATIVE64","","",null,null],[17,"R_X86_64_NUM","","",null,null],[17,"R_MN10300_NONE","","",null,null],[17,"R_MN10300_32","","",null,null],[17,"R_MN10300_16","","",null,null],[17,"R_MN10300_8","","",null,null],[17,"R_MN10300_PCREL32","","",null,null],[17,"R_MN10300_PCREL16","","",null,null],[17,"R_MN10300_PCREL8","","",null,null],[17,"R_MN10300_GNU_VTINHERIT","","",null,null],[17,"R_MN10300_GNU_VTENTRY","","",null,null],[17,"R_MN10300_24","","",null,null],[17,"R_MN10300_GOTPC32","","",null,null],[17,"R_MN10300_GOTPC16","","",null,null],[17,"R_MN10300_GOTOFF32","","",null,null],[17,"R_MN10300_GOTOFF24","","",null,null],[17,"R_MN10300_GOTOFF16","","",null,null],[17,"R_MN10300_PLT32","","",null,null],[17,"R_MN10300_PLT16","","",null,null],[17,"R_MN10300_GOT32","","",null,null],[17,"R_MN10300_GOT24","","",null,null],[17,"R_MN10300_GOT16","","",null,null],[17,"R_MN10300_COPY","","",null,null],[17,"R_MN10300_GLOB_DAT","","",null,null],[17,"R_MN10300_JMP_SLOT","","",null,null],[17,"R_MN10300_RELATIVE","","",null,null],[17,"R_MN10300_TLS_GD","","",null,null],[17,"R_MN10300_TLS_LD","","",null,null],[17,"R_MN10300_TLS_LDO","","",null,null],[17,"R_MN10300_TLS_GOTIE","","",null,null],[17,"R_MN10300_TLS_IE","","",null,null],[17,"R_MN10300_TLS_LE","","",null,null],[17,"R_MN10300_TLS_DTPMOD","","",null,null],[17,"R_MN10300_TLS_DTPOFF","","",null,null],[17,"R_MN10300_TLS_TPOFF","","",null,null],[17,"R_MN10300_SYM_DIFF","","",null,null],[17,"R_MN10300_ALIGN","","",null,null],[17,"R_MN10300_NUM","","",null,null],[17,"R_M32R_NONE","","",null,null],[17,"R_M32R_16","","",null,null],[17,"R_M32R_32","","",null,null],[17,"R_M32R_24","","",null,null],[17,"R_M32R_10_PCREL","","",null,null],[17,"R_M32R_18_PCREL","","",null,null],[17,"R_M32R_26_PCREL","","",null,null],[17,"R_M32R_HI16_ULO","","",null,null],[17,"R_M32R_HI16_SLO","","",null,null],[17,"R_M32R_LO16","","",null,null],[17,"R_M32R_SDA16","","",null,null],[17,"R_M32R_GNU_VTINHERIT","","",null,null],[17,"R_M32R_GNU_VTENTRY","","",null,null],[17,"R_M32R_16_RELA","","",null,null],[17,"R_M32R_32_RELA","","",null,null],[17,"R_M32R_24_RELA","","",null,null],[17,"R_M32R_10_PCREL_RELA","","",null,null],[17,"R_M32R_18_PCREL_RELA","","",null,null],[17,"R_M32R_26_PCREL_RELA","","",null,null],[17,"R_M32R_HI16_ULO_RELA","","",null,null],[17,"R_M32R_HI16_SLO_RELA","","",null,null],[17,"R_M32R_LO16_RELA","","",null,null],[17,"R_M32R_SDA16_RELA","","",null,null],[17,"R_M32R_RELA_GNU_VTINHERIT","","",null,null],[17,"R_M32R_RELA_GNU_VTENTRY","","",null,null],[17,"R_M32R_REL32","","",null,null],[17,"R_M32R_GOT24","","",null,null],[17,"R_M32R_26_PLTREL","","",null,null],[17,"R_M32R_COPY","","",null,null],[17,"R_M32R_GLOB_DAT","","",null,null],[17,"R_M32R_JMP_SLOT","","",null,null],[17,"R_M32R_RELATIVE","","",null,null],[17,"R_M32R_GOTOFF","","",null,null],[17,"R_M32R_GOTPC24","","",null,null],[17,"R_M32R_GOT16_HI_ULO","","",null,null],[17,"R_M32R_GOT16_HI_SLO","","",null,null],[17,"R_M32R_GOT16_LO","","",null,null],[17,"R_M32R_GOTPC_HI_ULO","","",null,null],[17,"R_M32R_GOTPC_HI_SLO","","",null,null],[17,"R_M32R_GOTPC_LO","","",null,null],[17,"R_M32R_GOTOFF_HI_ULO","","",null,null],[17,"R_M32R_GOTOFF_HI_SLO","","",null,null],[17,"R_M32R_GOTOFF_LO","","",null,null],[17,"R_M32R_NUM","","",null,null],[17,"R_MICROBLAZE_NONE","","",null,null],[17,"R_MICROBLAZE_32","","",null,null],[17,"R_MICROBLAZE_32_PCREL","","",null,null],[17,"R_MICROBLAZE_64_PCREL","","",null,null],[17,"R_MICROBLAZE_32_PCREL_LO","","",null,null],[17,"R_MICROBLAZE_64","","",null,null],[17,"R_MICROBLAZE_32_LO","","",null,null],[17,"R_MICROBLAZE_SRO32","","",null,null],[17,"R_MICROBLAZE_SRW32","","",null,null],[17,"R_MICROBLAZE_64_NONE","","",null,null],[17,"R_MICROBLAZE_32_SYM_OP_SYM","","",null,null],[17,"R_MICROBLAZE_GNU_VTINHERIT","","",null,null],[17,"R_MICROBLAZE_GNU_VTENTRY","","",null,null],[17,"R_MICROBLAZE_GOTPC_64","","",null,null],[17,"R_MICROBLAZE_GOT_64","","",null,null],[17,"R_MICROBLAZE_PLT_64","","",null,null],[17,"R_MICROBLAZE_REL","","",null,null],[17,"R_MICROBLAZE_JUMP_SLOT","","",null,null],[17,"R_MICROBLAZE_GLOB_DAT","","",null,null],[17,"R_MICROBLAZE_GOTOFF_64","","",null,null],[17,"R_MICROBLAZE_GOTOFF_32","","",null,null],[17,"R_MICROBLAZE_COPY","","",null,null],[17,"R_MICROBLAZE_TLS","","",null,null],[17,"R_MICROBLAZE_TLSGD","","",null,null],[17,"R_MICROBLAZE_TLSLD","","",null,null],[17,"R_MICROBLAZE_TLSDTPMOD32","","",null,null],[17,"R_MICROBLAZE_TLSDTPREL32","","",null,null],[17,"R_MICROBLAZE_TLSDTPREL64","","",null,null],[17,"R_MICROBLAZE_TLSGOTTPREL32","","",null,null],[17,"R_MICROBLAZE_TLSTPREL32","","",null,null],[17,"R_TILEPRO_NONE","","",null,null],[17,"R_TILEPRO_32","","",null,null],[17,"R_TILEPRO_16","","",null,null],[17,"R_TILEPRO_8","","",null,null],[17,"R_TILEPRO_32_PCREL","","",null,null],[17,"R_TILEPRO_16_PCREL","","",null,null],[17,"R_TILEPRO_8_PCREL","","",null,null],[17,"R_TILEPRO_LO16","","",null,null],[17,"R_TILEPRO_HI16","","",null,null],[17,"R_TILEPRO_HA16","","",null,null],[17,"R_TILEPRO_COPY","","",null,null],[17,"R_TILEPRO_GLOB_DAT","","",null,null],[17,"R_TILEPRO_JMP_SLOT","","",null,null],[17,"R_TILEPRO_RELATIVE","","",null,null],[17,"R_TILEPRO_BROFF_X1","","",null,null],[17,"R_TILEPRO_JOFFLONG_X1","","",null,null],[17,"R_TILEPRO_JOFFLONG_X1_PLT","","",null,null],[17,"R_TILEPRO_IMM8_X0","","",null,null],[17,"R_TILEPRO_IMM8_Y0","","",null,null],[17,"R_TILEPRO_IMM8_X1","","",null,null],[17,"R_TILEPRO_IMM8_Y1","","",null,null],[17,"R_TILEPRO_MT_IMM15_X1","","",null,null],[17,"R_TILEPRO_MF_IMM15_X1","","",null,null],[17,"R_TILEPRO_IMM16_X0","","",null,null],[17,"R_TILEPRO_IMM16_X1","","",null,null],[17,"R_TILEPRO_IMM16_X0_LO","","",null,null],[17,"R_TILEPRO_IMM16_X1_LO","","",null,null],[17,"R_TILEPRO_IMM16_X0_HI","","",null,null],[17,"R_TILEPRO_IMM16_X1_HI","","",null,null],[17,"R_TILEPRO_IMM16_X0_HA","","",null,null],[17,"R_TILEPRO_IMM16_X1_HA","","",null,null],[17,"R_TILEPRO_IMM16_X0_PCREL","","",null,null],[17,"R_TILEPRO_IMM16_X1_PCREL","","",null,null],[17,"R_TILEPRO_IMM16_X0_LO_PCREL","","",null,null],[17,"R_TILEPRO_IMM16_X1_LO_PCREL","","",null,null],[17,"R_TILEPRO_IMM16_X0_HI_PCREL","","",null,null],[17,"R_TILEPRO_IMM16_X1_HI_PCREL","","",null,null],[17,"R_TILEPRO_IMM16_X0_HA_PCREL","","",null,null],[17,"R_TILEPRO_IMM16_X1_HA_PCREL","","",null,null],[17,"R_TILEPRO_IMM16_X0_GOT","","",null,null],[17,"R_TILEPRO_IMM16_X1_GOT","","",null,null],[17,"R_TILEPRO_IMM16_X0_GOT_LO","","",null,null],[17,"R_TILEPRO_IMM16_X1_GOT_LO","","",null,null],[17,"R_TILEPRO_IMM16_X0_GOT_HI","","",null,null],[17,"R_TILEPRO_IMM16_X1_GOT_HI","","",null,null],[17,"R_TILEPRO_IMM16_X0_GOT_HA","","",null,null],[17,"R_TILEPRO_IMM16_X1_GOT_HA","","",null,null],[17,"R_TILEPRO_MMSTART_X0","","",null,null],[17,"R_TILEPRO_MMEND_X0","","",null,null],[17,"R_TILEPRO_MMSTART_X1","","",null,null],[17,"R_TILEPRO_MMEND_X1","","",null,null],[17,"R_TILEPRO_SHAMT_X0","","",null,null],[17,"R_TILEPRO_SHAMT_X1","","",null,null],[17,"R_TILEPRO_SHAMT_Y0","","",null,null],[17,"R_TILEPRO_SHAMT_Y1","","",null,null],[17,"R_TILEPRO_DEST_IMM8_X1","","",null,null],[17,"R_TILEPRO_TLS_GD_CALL","","",null,null],[17,"R_TILEPRO_IMM8_X0_TLS_GD_ADD","","",null,null],[17,"R_TILEPRO_IMM8_X1_TLS_GD_ADD","","",null,null],[17,"R_TILEPRO_IMM8_Y0_TLS_GD_ADD","","",null,null],[17,"R_TILEPRO_IMM8_Y1_TLS_GD_ADD","","",null,null],[17,"R_TILEPRO_TLS_IE_LOAD","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_GD","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_GD","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_GD_LO","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_GD_LO","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_GD_HI","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_GD_HI","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_GD_HA","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_GD_HA","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_IE","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_IE","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_IE_LO","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_IE_LO","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_IE_HI","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_IE_HI","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_IE_HA","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_IE_HA","","",null,null],[17,"R_TILEPRO_TLS_DTPMOD32","","",null,null],[17,"R_TILEPRO_TLS_DTPOFF32","","",null,null],[17,"R_TILEPRO_TLS_TPOFF32","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_LE","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_LE","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_LE_LO","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_LE_LO","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_LE_HI","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_LE_HI","","",null,null],[17,"R_TILEPRO_IMM16_X0_TLS_LE_HA","","",null,null],[17,"R_TILEPRO_IMM16_X1_TLS_LE_HA","","",null,null],[17,"R_TILEPRO_GNU_VTINHERIT","","",null,null],[17,"R_TILEPRO_GNU_VTENTRY","","",null,null],[17,"R_TILEPRO_NUM","","",null,null],[17,"R_TILEGX_NONE","","",null,null],[17,"R_TILEGX_64","","",null,null],[17,"R_TILEGX_32","","",null,null],[17,"R_TILEGX_16","","",null,null],[17,"R_TILEGX_8","","",null,null],[17,"R_TILEGX_64_PCREL","","",null,null],[17,"R_TILEGX_32_PCREL","","",null,null],[17,"R_TILEGX_16_PCREL","","",null,null],[17,"R_TILEGX_8_PCREL","","",null,null],[17,"R_TILEGX_HW0","","",null,null],[17,"R_TILEGX_HW1","","",null,null],[17,"R_TILEGX_HW2","","",null,null],[17,"R_TILEGX_HW3","","",null,null],[17,"R_TILEGX_HW0_LAST","","",null,null],[17,"R_TILEGX_HW1_LAST","","",null,null],[17,"R_TILEGX_HW2_LAST","","",null,null],[17,"R_TILEGX_COPY","","",null,null],[17,"R_TILEGX_GLOB_DAT","","",null,null],[17,"R_TILEGX_JMP_SLOT","","",null,null],[17,"R_TILEGX_RELATIVE","","",null,null],[17,"R_TILEGX_BROFF_X1","","",null,null],[17,"R_TILEGX_JUMPOFF_X1","","",null,null],[17,"R_TILEGX_JUMPOFF_X1_PLT","","",null,null],[17,"R_TILEGX_IMM8_X0","","",null,null],[17,"R_TILEGX_IMM8_Y0","","",null,null],[17,"R_TILEGX_IMM8_X1","","",null,null],[17,"R_TILEGX_IMM8_Y1","","",null,null],[17,"R_TILEGX_DEST_IMM8_X1","","",null,null],[17,"R_TILEGX_MT_IMM14_X1","","",null,null],[17,"R_TILEGX_MF_IMM14_X1","","",null,null],[17,"R_TILEGX_MMSTART_X0","","",null,null],[17,"R_TILEGX_MMEND_X0","","",null,null],[17,"R_TILEGX_SHAMT_X0","","",null,null],[17,"R_TILEGX_SHAMT_X1","","",null,null],[17,"R_TILEGX_SHAMT_Y0","","",null,null],[17,"R_TILEGX_SHAMT_Y1","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1","","",null,null],[17,"R_TILEGX_IMM16_X0_HW2","","",null,null],[17,"R_TILEGX_IMM16_X1_HW2","","",null,null],[17,"R_TILEGX_IMM16_X0_HW3","","",null,null],[17,"R_TILEGX_IMM16_X1_HW3","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_LAST","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_LAST","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_LAST","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_LAST","","",null,null],[17,"R_TILEGX_IMM16_X0_HW2_LAST","","",null,null],[17,"R_TILEGX_IMM16_X1_HW2_LAST","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW2_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW2_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW3_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW3_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_LAST_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_LAST_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_LAST_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_LAST_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW2_LAST_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW2_LAST_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_GOT","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_GOT","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW2_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW2_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_LAST_GOT","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_LAST_GOT","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_LAST_GOT","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_LAST_GOT","","",null,null],[17,"R_TILEGX_IMM16_X0_HW3_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW3_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_TLS_GD","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_TLS_GD","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_TLS_LE","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_TLS_LE","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_TLS_IE","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_TLS_IE","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL","","",null,null],[17,"R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE","","",null,null],[17,"R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE","","",null,null],[17,"R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE","","",null,null],[17,"R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE","","",null,null],[17,"R_TILEGX_TLS_DTPMOD64","","",null,null],[17,"R_TILEGX_TLS_DTPOFF64","","",null,null],[17,"R_TILEGX_TLS_TPOFF64","","",null,null],[17,"R_TILEGX_TLS_DTPMOD32","","",null,null],[17,"R_TILEGX_TLS_DTPOFF32","","",null,null],[17,"R_TILEGX_TLS_TPOFF32","","",null,null],[17,"R_TILEGX_TLS_GD_CALL","","",null,null],[17,"R_TILEGX_IMM8_X0_TLS_GD_ADD","","",null,null],[17,"R_TILEGX_IMM8_X1_TLS_GD_ADD","","",null,null],[17,"R_TILEGX_IMM8_Y0_TLS_GD_ADD","","",null,null],[17,"R_TILEGX_IMM8_Y1_TLS_GD_ADD","","",null,null],[17,"R_TILEGX_TLS_IE_LOAD","","",null,null],[17,"R_TILEGX_IMM8_X0_TLS_ADD","","",null,null],[17,"R_TILEGX_IMM8_X1_TLS_ADD","","",null,null],[17,"R_TILEGX_IMM8_Y0_TLS_ADD","","",null,null],[17,"R_TILEGX_IMM8_Y1_TLS_ADD","","",null,null],[17,"R_TILEGX_GNU_VTINHERIT","","",null,null],[17,"R_TILEGX_GNU_VTENTRY","","",null,null],[17,"R_TILEGX_NUM","","",null,null],[11,"clone","","",101,{"inputs":[{"name":"struct_unnamed1"}],"output":{"name":"self"}}],[11,"default","","",101,{"inputs":[{"name":"struct_unnamed1"}],"output":{"name":"self"}}],[11,"clone","","",102,{"inputs":[{"name":"struct_unnamed2"}],"output":{"name":"self"}}],[11,"default","","",102,{"inputs":[{"name":"struct_unnamed2"}],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"struct_unnamed3"}],"output":{"name":"self"}}],[11,"default","","",103,{"inputs":[{"name":"struct_unnamed3"}],"output":{"name":"self"}}],[11,"clone","","",104,{"inputs":[{"name":"struct_unnamed4"}],"output":{"name":"self"}}],[11,"default","","",104,{"inputs":[{"name":"struct_unnamed4"}],"output":{"name":"self"}}],[11,"clone","","",105,{"inputs":[{"name":"struct_unnamed5"}],"output":{"name":"self"}}],[11,"default","","",105,{"inputs":[{"name":"struct_unnamed5"}],"output":{"name":"self"}}],[11,"clone","","",106,{"inputs":[{"name":"struct_unnamed6"}],"output":{"name":"self"}}],[11,"default","","",106,{"inputs":[{"name":"struct_unnamed6"}],"output":{"name":"self"}}],[11,"clone","","",107,{"inputs":[{"name":"struct_unnamed7"}],"output":{"name":"self"}}],[11,"default","","",107,{"inputs":[{"name":"struct_unnamed7"}],"output":{"name":"self"}}],[11,"clone","","",108,{"inputs":[{"name":"struct_unnamed8"}],"output":{"name":"self"}}],[11,"default","","",108,{"inputs":[{"name":"struct_unnamed8"}],"output":{"name":"self"}}],[11,"clone","","",109,{"inputs":[{"name":"struct_unnamed9"}],"output":{"name":"self"}}],[11,"default","","",109,{"inputs":[{"name":"struct_unnamed9"}],"output":{"name":"self"}}],[11,"clone","","",110,{"inputs":[{"name":"struct_unnamed10"}],"output":{"name":"self"}}],[11,"default","","",110,{"inputs":[{"name":"struct_unnamed10"}],"output":{"name":"self"}}],[11,"clone","","",111,{"inputs":[{"name":"struct_unnamed11"}],"output":{"name":"self"}}],[11,"default","","",111,{"inputs":[{"name":"struct_unnamed11"}],"output":{"name":"self"}}],[11,"clone","","",112,{"inputs":[{"name":"struct_unnamed12"}],"output":{"name":"self"}}],[11,"default","","",112,{"inputs":[{"name":"struct_unnamed12"}],"output":{"name":"self"}}],[11,"clone","","",113,{"inputs":[{"name":"struct_unnamed13"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[{"name":"struct_unnamed13"}],"output":{"name":"self"}}],[11,"clone","","",114,{"inputs":[{"name":"struct_unnamed14"}],"output":{"name":"self"}}],[11,"default","","",114,{"inputs":[{"name":"struct_unnamed14"}],"output":{"name":"self"}}],[11,"clone","","",115,{"inputs":[{"name":"struct_unnamed15"}],"output":{"name":"self"}}],[11,"default","","",115,{"inputs":[{"name":"struct_unnamed15"}],"output":{"name":"self"}}],[11,"d_val","","",116,null],[11,"d_ptr","","",116,null],[11,"clone","","",116,{"inputs":[{"name":"union_unnamed16"}],"output":{"name":"self"}}],[11,"default","","",116,{"inputs":[{"name":"union_unnamed16"}],"output":{"name":"self"}}],[11,"clone","","",117,{"inputs":[{"name":"struct_unnamed17"}],"output":{"name":"self"}}],[11,"default","","",117,{"inputs":[{"name":"struct_unnamed17"}],"output":{"name":"self"}}],[11,"d_val","","",118,null],[11,"d_ptr","","",118,null],[11,"clone","","",118,{"inputs":[{"name":"union_unnamed18"}],"output":{"name":"self"}}],[11,"default","","",118,{"inputs":[{"name":"union_unnamed18"}],"output":{"name":"self"}}],[11,"clone","","",119,{"inputs":[{"name":"struct_unnamed19"}],"output":{"name":"self"}}],[11,"default","","",119,{"inputs":[{"name":"struct_unnamed19"}],"output":{"name":"self"}}],[11,"clone","","",120,{"inputs":[{"name":"struct_unnamed20"}],"output":{"name":"self"}}],[11,"default","","",120,{"inputs":[{"name":"struct_unnamed20"}],"output":{"name":"self"}}],[11,"clone","","",121,{"inputs":[{"name":"struct_unnamed21"}],"output":{"name":"self"}}],[11,"default","","",121,{"inputs":[{"name":"struct_unnamed21"}],"output":{"name":"self"}}],[11,"clone","","",122,{"inputs":[{"name":"struct_unnamed22"}],"output":{"name":"self"}}],[11,"default","","",122,{"inputs":[{"name":"struct_unnamed22"}],"output":{"name":"self"}}],[11,"clone","","",123,{"inputs":[{"name":"struct_unnamed23"}],"output":{"name":"self"}}],[11,"default","","",123,{"inputs":[{"name":"struct_unnamed23"}],"output":{"name":"self"}}],[11,"clone","","",124,{"inputs":[{"name":"struct_unnamed24"}],"output":{"name":"self"}}],[11,"default","","",124,{"inputs":[{"name":"struct_unnamed24"}],"output":{"name":"self"}}],[11,"clone","","",125,{"inputs":[{"name":"struct_unnamed25"}],"output":{"name":"self"}}],[11,"default","","",125,{"inputs":[{"name":"struct_unnamed25"}],"output":{"name":"self"}}],[11,"clone","","",126,{"inputs":[{"name":"struct_unnamed26"}],"output":{"name":"self"}}],[11,"default","","",126,{"inputs":[{"name":"struct_unnamed26"}],"output":{"name":"self"}}],[11,"clone","","",127,{"inputs":[{"name":"struct_unnamed27"}],"output":{"name":"self"}}],[11,"default","","",127,{"inputs":[{"name":"struct_unnamed27"}],"output":{"name":"self"}}],[11,"a_val","","",128,null],[11,"clone","","",128,{"inputs":[{"name":"union_unnamed28"}],"output":{"name":"self"}}],[11,"default","","",128,{"inputs":[{"name":"union_unnamed28"}],"output":{"name":"self"}}],[11,"clone","","",129,{"inputs":[{"name":"struct_unnamed29"}],"output":{"name":"self"}}],[11,"default","","",129,{"inputs":[{"name":"struct_unnamed29"}],"output":{"name":"self"}}],[11,"a_val","","",130,null],[11,"clone","","",130,{"inputs":[{"name":"union_unnamed30"}],"output":{"name":"self"}}],[11,"default","","",130,{"inputs":[{"name":"union_unnamed30"}],"output":{"name":"self"}}],[11,"clone","","",131,{"inputs":[{"name":"struct_unnamed31"}],"output":{"name":"self"}}],[11,"default","","",131,{"inputs":[{"name":"struct_unnamed31"}],"output":{"name":"self"}}],[11,"clone","","",132,{"inputs":[{"name":"struct_unnamed32"}],"output":{"name":"self"}}],[11,"default","","",132,{"inputs":[{"name":"struct_unnamed32"}],"output":{"name":"self"}}],[11,"clone","","",133,{"inputs":[{"name":"struct_unnamed33"}],"output":{"name":"self"}}],[11,"default","","",133,{"inputs":[{"name":"struct_unnamed33"}],"output":{"name":"self"}}],[11,"clone","","",134,{"inputs":[{"name":"struct_unnamed34"}],"output":{"name":"self"}}],[11,"default","","",134,{"inputs":[{"name":"struct_unnamed34"}],"output":{"name":"self"}}],[11,"gt_header","","",135,null],[11,"gt_entry","","",135,null],[11,"clone","","",135,{"inputs":[{"name":"union_unnamed35"}],"output":{"name":"self"}}],[11,"default","","",135,{"inputs":[{"name":"union_unnamed35"}],"output":{"name":"self"}}],[11,"clone","","",136,{"inputs":[{"name":"struct_unnamed36"}],"output":{"name":"self"}}],[11,"default","","",136,{"inputs":[{"name":"struct_unnamed36"}],"output":{"name":"self"}}],[11,"clone","","",137,{"inputs":[{"name":"struct_unnamed37"}],"output":{"name":"self"}}],[11,"default","","",137,{"inputs":[{"name":"struct_unnamed37"}],"output":{"name":"self"}}],[11,"clone","","",138,{"inputs":[{"name":"struct_unnamed38"}],"output":{"name":"self"}}],[11,"default","","",138,{"inputs":[{"name":"struct_unnamed38"}],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"struct_unnamed39"}],"output":{"name":"self"}}],[11,"default","","",139,{"inputs":[{"name":"struct_unnamed39"}],"output":{"name":"self"}}],[11,"clone","","",140,{"inputs":[{"name":"struct_unnamed40"}],"output":{"name":"self"}}],[11,"default","","",140,{"inputs":[{"name":"struct_unnamed40"}],"output":{"name":"self"}}],[11,"clone","","",141,{"inputs":[{"name":"struct_unnamed41"}],"output":{"name":"self"}}],[11,"default","","",141,{"inputs":[{"name":"struct_unnamed41"}],"output":{"name":"self"}}],[11,"clone","","",142,{"inputs":[{"name":"struct_unnamed42"}],"output":{"name":"self"}}],[11,"default","","",142,{"inputs":[{"name":"struct_unnamed42"}],"output":{"name":"self"}}],[0,"io","kernel","Input and output.",null,null],[3,"Promise","kernel::io","A computation that might eventually resolve to a value of type `T`.",null,null],[0,"flat_map","","",null,null],[3,"FlatMap","kernel::io::flat_map","An adaptor which will modify the data produced by a reader.",null,null],[11,"new","","",143,{"inputs":[{"name":"flatmap"},{"name":"arc"},{"name":"usize"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[11,"read_async","","",143,{"inputs":[{"name":"flatmap"},{"name":"vec"}],"output":{"name":"promise"}}],[0,"pipe","kernel::io","",null,null],[3,"Pipe","kernel::io::pipe","",null,null],[11,"new","","",144,{"inputs":[{"name":"pipe"}],"output":{"name":"self"}}],[11,"queue_len","","",144,{"inputs":[{"name":"pipe"}],"output":{"name":"usize"}}],[11,"read_async","","",144,{"inputs":[{"name":"pipe"},{"name":"vec"}],"output":{"name":"promise"}}],[11,"write","","",144,null],[8,"Read","kernel::io","Allows for reading bytes from a source.",null,null],[10,"read","","",145,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","",146,null],[8,"AsyncRead","","Allows for reading bytes asynchronously from a source.",null,null],[10,"read_async","","",147,{"inputs":[{"name":"asyncread"},{"name":"vec"}],"output":{"name":"promise"}}],[11,"new","","Creates a promise from a kernel `Deferred` object. The promise is resolved once the deferred is resolved.",148,{"inputs":[{"name":"promise"},{"name":"deferred"}],"output":{"name":"self"}}],[11,"resolved","","Creates a promise from a constant value. The promise is resolved immediately.",148,{"inputs":[{"name":"promise"},{"name":"t"}],"output":{"name":"self"}}],[11,"get","","Blocks until the promise is resolved, then returns the value within.",148,{"inputs":[{"name":"promise"}],"output":{"name":"t"}}],[11,"try_get","","Attempts to get the value inside the promise.",148,{"inputs":[{"name":"promise"}],"output":{"name":"result"}}],[11,"then","","Returns a new promise that applies a function to the value inside the promise.",148,{"inputs":[{"name":"promise"},{"name":"f"}],"output":{"name":"promise"}}],[11,"unwrap","","Given a promise that resolves to `Promise<T>`, returns a promise that resolves to `T`.",148,{"inputs":[{"name":"promise"}],"output":{"name":"promise"}}],[0,"ksyscall","kernel","",null,null],[3,"SyscallHandler","kernel::ksyscall","",null,null],[5,"register_handler","","",null,{"inputs":[{"name":"syscallhandler"}],"output":{"name":"dropsyscallhandler"}}],[5,"dispatch","","",null,{"inputs":[{"name":"usize"},{"name":"packedargs"}],"output":{"name":"isize"}}],[6,"DropSyscallHandler","","",null,null],[11,"new","","",149,{"inputs":[{"name":"syscallhandler"},{"name":"arc"}],"output":{"name":"self"}}],[11,"exit_thread","","",149,{"inputs":[{"name":"syscallhandler"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write","","",149,null],[11,"read","","",149,null],[11,"alloc_pages","","",149,{"inputs":[{"name":"syscallhandler"},{"name":"usize"}],"output":{"name":"result"}}],[11,"free_pages","","",149,null],[11,"open","","",149,{"inputs":[{"name":"syscallhandler"},{"name":"str"}],"output":{"name":"result"}}],[11,"close","","",149,{"inputs":[{"name":"syscallhandler"},{"name":"handle"}],"output":{"name":"result"}}],[11,"init_video_mode","","",149,{"inputs":[{"name":"syscallhandler"},{"name":"u16"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"spawn","","",149,{"inputs":[{"name":"syscallhandler"},{"name":"str"}],"output":{"name":"result"}}],[11,"wait_for_exit","","",149,{"inputs":[{"name":"syscallhandler"},{"name":"processhandle"}],"output":{"name":"result"}}],[0,"libc_helpers","kernel","",null,null],[5,"__errno","kernel::libc_helpers","",null,null],[5,"__assert_fail","","",null,null],[5,"__stack_chk_fail","","",null,{"inputs":[],"output":null}],[5,"_fputwc_r","","",null,null],[5,"_exit","","",null,{"inputs":[{"name":"c_int"}],"output":null}],[5,"kill","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"c_int"}}],[5,"write","","",null,null],[5,"close","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"fstat","","",null,null],[5,"isatty","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"lseek","","",null,{"inputs":[{"name":"c_int"},{"name":"off_t"},{"name":"c_int"}],"output":{"name":"off_t"}}],[5,"read","","",null,null],[5,"init","","",null,{"inputs":[],"output":null}],[0,"logging","kernel","",null,null],[3,"Writer","kernel::logging","",null,null],[11,"clone","","",150,{"inputs":[{"name":"writer"}],"output":{"name":"writer"}}],[11,"get","","",150,{"inputs":[{"name":"writer"},{"name":"str"}],"output":{"name":"writer"}}],[11,"write_str","","",150,{"inputs":[{"name":"writer"},{"name":"str"}],"output":{"name":"result"}}],[0,"multiboot","kernel","",null,null],[3,"Struct_multiboot_header","kernel::multiboot","",null,null],[12,"magic","","",151,null],[12,"flags","","",151,null],[12,"checksum","","",151,null],[12,"header_addr","","",151,null],[12,"load_addr","","",151,null],[12,"load_end_addr","","",151,null],[12,"bss_end_addr","","",151,null],[12,"entry_addr","","",151,null],[12,"mode_type","","",151,null],[12,"width","","",151,null],[12,"height","","",151,null],[12,"depth","","",151,null],[3,"Struct_multiboot_aout_symbol_table","","",null,null],[12,"tabsize","","",152,null],[12,"strsize","","",152,null],[12,"addr","","",152,null],[12,"reserved","","",152,null],[3,"Struct_multiboot_elf_section_header_table","","",null,null],[12,"num","","",153,null],[12,"size","","",153,null],[12,"addr","","",153,null],[12,"shndx","","",153,null],[3,"Struct_multiboot_info","","",null,null],[12,"flags","","",154,null],[12,"mem_lower","","",154,null],[12,"mem_upper","","",154,null],[12,"boot_device","","",154,null],[12,"cmdline","","",154,null],[12,"mods_count","","",154,null],[12,"mods_addr","","",154,null],[12,"u","","",154,null],[12,"mmap_length","","",154,null],[12,"mmap_addr","","",154,null],[12,"drives_length","","",154,null],[12,"drives_addr","","",154,null],[12,"config_table","","",154,null],[12,"boot_loader_name","","",154,null],[12,"apm_table","","",154,null],[12,"vbe_control_info","","",154,null],[12,"vbe_mode_info","","",154,null],[12,"vbe_mode","","",154,null],[12,"vbe_interface_seg","","",154,null],[12,"vbe_interface_off","","",154,null],[12,"vbe_interface_len","","",154,null],[12,"framebuffer_addr","","",154,null],[12,"framebuffer_pitch","","",154,null],[12,"framebuffer_width","","",154,null],[12,"framebuffer_height","","",154,null],[12,"framebuffer_bpp","","",154,null],[12,"framebuffer_type","","",154,null],[12,"_bindgen_data_1_","","",154,null],[3,"Union_Unnamed1","","",null,null],[12,"_bindgen_data_","","",155,null],[3,"Struct_multiboot_color","","",null,null],[12,"red","","",156,null],[12,"green","","",156,null],[12,"blue","","",156,null],[3,"Struct_multiboot_mmap_entry","","",null,null],[12,"size","","",157,null],[12,"addr","","",157,null],[12,"len","","",157,null],[12,"_type","","",157,null],[3,"Struct_multiboot_mod_list","","",null,null],[12,"mod_start","","",158,null],[12,"mod_end","","",158,null],[12,"cmdline","","",158,null],[12,"pad","","",158,null],[3,"Struct_multiboot_apm_info","","",null,null],[12,"version","","",159,null],[12,"cseg","","",159,null],[12,"offset","","",159,null],[12,"cseg_16","","",159,null],[12,"dseg","","",159,null],[12,"flags","","",159,null],[12,"cseg_len","","",159,null],[12,"cseg_16_len","","",159,null],[12,"dseg_len","","",159,null],[6,"multiboot_uint8_t","","",null,null],[6,"multiboot_uint16_t","","",null,null],[6,"multiboot_uint32_t","","",null,null],[6,"multiboot_uint64_t","","",null,null],[6,"multiboot_aout_symbol_table_t","","",null,null],[6,"multiboot_elf_section_header_table_t","","",null,null],[6,"multiboot_info_t","","",null,null],[6,"multiboot_memory_map_t","","",null,null],[6,"multiboot_module_t","","",null,null],[11,"clone","","",151,{"inputs":[{"name":"struct_multiboot_header"}],"output":{"name":"self"}}],[11,"default","","",151,{"inputs":[{"name":"struct_multiboot_header"}],"output":{"name":"self"}}],[11,"clone","","",152,{"inputs":[{"name":"struct_multiboot_aout_symbol_table"}],"output":{"name":"self"}}],[11,"default","","",152,{"inputs":[{"name":"struct_multiboot_aout_symbol_table"}],"output":{"name":"self"}}],[11,"clone","","",153,{"inputs":[{"name":"struct_multiboot_elf_section_header_table"}],"output":{"name":"self"}}],[11,"default","","",153,{"inputs":[{"name":"struct_multiboot_elf_section_header_table"}],"output":{"name":"self"}}],[11,"framebuffer_palette_addr","","",154,null],[11,"framebuffer_palette_num_colors","","",154,null],[11,"framebuffer_red_field_position","","",154,null],[11,"framebuffer_red_mask_size","","",154,null],[11,"framebuffer_green_field_position","","",154,null],[11,"framebuffer_green_mask_size","","",154,null],[11,"framebuffer_blue_field_position","","",154,null],[11,"framebuffer_blue_mask_size","","",154,null],[11,"clone","","",154,{"inputs":[{"name":"struct_multiboot_info"}],"output":{"name":"self"}}],[11,"default","","",154,{"inputs":[{"name":"struct_multiboot_info"}],"output":{"name":"self"}}],[11,"aout_sym","","",155,null],[11,"elf_sec","","",155,null],[11,"clone","","",155,{"inputs":[{"name":"union_unnamed1"}],"output":{"name":"self"}}],[11,"default","","",155,{"inputs":[{"name":"union_unnamed1"}],"output":{"name":"self"}}],[11,"clone","","",156,{"inputs":[{"name":"struct_multiboot_color"}],"output":{"name":"self"}}],[11,"default","","",156,{"inputs":[{"name":"struct_multiboot_color"}],"output":{"name":"self"}}],[11,"clone","","",157,{"inputs":[{"name":"struct_multiboot_mmap_entry"}],"output":{"name":"self"}}],[11,"default","","",157,{"inputs":[{"name":"struct_multiboot_mmap_entry"}],"output":{"name":"self"}}],[11,"clone","","",158,{"inputs":[{"name":"struct_multiboot_mod_list"}],"output":{"name":"self"}}],[11,"default","","",158,{"inputs":[{"name":"struct_multiboot_mod_list"}],"output":{"name":"self"}}],[11,"clone","","",159,{"inputs":[{"name":"struct_multiboot_apm_info"}],"output":{"name":"self"}}],[11,"default","","",159,{"inputs":[{"name":"struct_multiboot_apm_info"}],"output":{"name":"self"}}],[0,"once","kernel","A \"once initialization\" primitive",null,null],[3,"Once","kernel::once","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",160,{"inputs":[{"name":"once"},{"name":"f"}],"output":null}],[0,"phys_mem","kernel","",null,null],[3,"PhysicalBitmap","kernel::phys_mem","",null,null],[5,"sbrk","","",null,null],[5,"phys2virt","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"t"}}],[5,"virt2phys","","",null,null],[5,"multiboot_info","","",null,{"inputs":[],"output":{"name":"multiboot_info_t"}}],[17,"PAGE_SIZE","","",null,null],[11,"new","","",161,{"inputs":[{"name":"physicalbitmap"},{"name":"usize"}],"output":{"name":"physicalbitmap"}}],[11,"parse_multiboot","","",161,{"inputs":[{"name":"physicalbitmap"}],"output":{"name":"physicalbitmap"}}],[11,"reserve_pages","","",161,{"inputs":[{"name":"physicalbitmap"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve_addr","","",161,{"inputs":[{"name":"physicalbitmap"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reserve_ptr","","",161,null],[11,"total_bytes","","",161,{"inputs":[{"name":"physicalbitmap"}],"output":{"name":"usize"}}],[11,"free_bytes","","",161,{"inputs":[{"name":"physicalbitmap"}],"output":{"name":"usize"}}],[11,"alloc_page","","",161,{"inputs":[{"name":"physicalbitmap"}],"output":{"name":"result"}}],[11,"free_page","","",161,{"inputs":[{"name":"physicalbitmap"},{"name":"usize"}],"output":null}],[0,"prelude","kernel","",null,null],[11,"fmt","alloc::arc","",162,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",163,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",163,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",163,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_unique","","",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Arc<T>` by cloning the inner\ndata if the `Arc<T>` doesn't have one strong reference and no weak\nreferences.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc<T>` has\none strong reference and no weak references.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc<T>`.",163,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",162,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",162,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",162,null],[11,"eq","","Equality for two `Arc<T>`s.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",163,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",163,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",163,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",163,null],[11,"borrow","","",163,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"as_ref","","",163,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",164,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","",164,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",164,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",164,null],[11,"clone","","Makes a clone of the `Rc<T>`.",164,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",164,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",164,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",164,null],[11,"fmt","","",164,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",165,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",165,null],[11,"clone","","Makes a clone of the `Weak<T>`.",165,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",165,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",164,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",164,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",166,{"inputs":[{"name":"rawvec"}],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",166,{"inputs":[{"name":"rawvec"},{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",166,null],[11,"from_box","","Converts a `Box<[T]>` into a `RawVec<T>`.",166,{"inputs":[{"name":"rawvec"},{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",166,null],[11,"cap","","Gets the capacity of the allocation.",166,{"inputs":[{"name":"rawvec"}],"output":{"name":"usize"}}],[11,"double","","Doubles the size of the type's backing allocation. This is common enough\nto want to do that it's easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",166,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",166,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn't already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",166,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",166,null],[11,"into_box","","Converts the entire buffer into `Box<[T]>`.",166,{"inputs":[{"name":"rawvec"}],"output":{"name":"box"}}],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",166,{"inputs":[{"name":"rawvec"}],"output":{"name":"bool"}}],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",166,null],[3,"Box","kernel::prelude","A pointer type for heap allocation.",null,null],[3,"String","","A growable string stored as a UTF-8 encoded buffer.",null,null],[8,"ToString","","A generic trait for converting a value to a string",null,null],[10,"to_string","","Converts the value of `self` to an owned string",167,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[3,"Vec","","A growable list type, written `Vec<T>` but pronounced 'vector.'",null,null],[0,"process","kernel","",null,null],[3,"Process","kernel::process","",null,null],[5,"spawn","","",null,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[5,"alloc","","",null,{"inputs":[{"name":"usize"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"alloc_at","","",null,null],[5,"map_phys","","",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"free","","",null,null],[5,"make_handle","","",null,{"inputs":[{"name":"arc"}],"output":{"name":"handle"}}],[5,"resolve_handle","","",null,{"inputs":[{"name":"handle"}],"output":{"name":"option"}}],[5,"close_handle","","",null,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[8,"KObj","","",null,null],[11,"async_read","","",168,{"inputs":[{"name":"kobj"}],"output":{"name":"option"}}],[11,"read","","",168,{"inputs":[{"name":"kobj"}],"output":{"name":"option"}}],[11,"write","","",168,{"inputs":[{"name":"kobj"}],"output":{"name":"option"}}],[11,"deferred_i32","","",168,{"inputs":[{"name":"kobj"}],"output":{"name":"option"}}],[11,"new","","",169,{"inputs":[{"name":"process"},{"name":"arc"},{"name":"arc"}],"output":{"name":"result"}}],[11,"spawn","","",169,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"switch","","",169,{"inputs":[{"name":"process"}],"output":null}],[0,"ptr","kernel","",null,null],[5,"bytes_between","kernel::ptr","",null,null],[5,"align_slice","","",null,null],[5,"align_slice_mut","","",null,null],[8,"Align","","",null,null],[10,"down","","",170,{"inputs":[{"name":"align"},{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[10,"up","","",170,{"inputs":[{"name":"align"},{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[10,"range","","",170,null],[10,"is_aligned","","",170,{"inputs":[{"name":"align"},{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[0,"singleton","kernel","",null,null],[3,"Singleton","kernel::singleton","",null,null],[3,"DropSingleton","","",null,null],[11,"new","","",171,{"inputs":[{"name":"singleton"}],"output":{"name":"singleton"}}],[11,"get","","",171,{"inputs":[{"name":"singleton"}],"output":{"name":"option"}}],[11,"register","","",171,{"inputs":[{"name":"singleton"},{"name":"t"}],"output":{"name":"dropsingleton"}}],[11,"drop","","",172,{"inputs":[{"name":"dropsingleton"}],"output":null}],[0,"tar","kernel","",null,null],[5,"locate","kernel::tar","",null,null],[0,"thread","kernel","",null,null],[3,"BlockedThread","kernel::thread","",null,null],[5,"with_scheduler","","",null,{"inputs":[{"name":"f"}],"output":null}],[5,"current_process","","",null,{"inputs":[],"output":{"name":"arc"}}],[5,"block","","",null,{"inputs":[{"name":"park"}],"output":{"name":"bool"}}],[5,"schedule","","",null,{"inputs":[],"output":null}],[5,"exit","","",null,{"inputs":[{"name":"i32"}],"output":null}],[5,"spawn_remote","","",null,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"deferred"}}],[5,"spawn","","",null,{"inputs":[{"name":"t"}],"output":{"name":"deferred"}}],[11,"resume","","",173,{"inputs":[{"name":"blockedthread"}],"output":null}],[0,"unwind","kernel","",null,null],[3,"_Unwind_Context","kernel::unwind","",null,null],[3,"_Unwind_Exception","","",null,null],[4,"_Unwind_Reason_Code","","",null,null],[13,"_URC_NO_REASON","","",174,null],[13,"_URC_FOREIGN_EXCEPTION_CAUGHT","","",174,null],[13,"_URC_FATAL_PHASE2_ERROR","","",174,null],[13,"_URC_FATAL_PHASE1_ERROR","","",174,null],[13,"_URC_NORMAL_STOP","","",174,null],[13,"_URC_END_OF_STACK","","",174,null],[13,"_URC_HANDLER_FOUND","","",174,null],[13,"_URC_INSTALL_CONTEXT","","",174,null],[13,"_URC_CONTINUE_UNWIND","","",174,null],[5,"rust_begin_unwind","","",null,{"inputs":[{"name":"arguments"},{"name":"str"},{"name":"u32"}],"output":null}],[5,"__morestack","","",null,{"inputs":[],"output":null}],[5,"rust_eh_personality","","",null,{"inputs":[{"name":"isize"},{"name":"_unwind_action"},{"name":"u64"},{"name":"_unwind_exception"},{"name":"_unwind_context"}],"output":{"name":"_unwind_reason_code"}}],[5,"_Unwind_Resume","","",null,{"inputs":[],"output":null}],[6,"_Unwind_Action","","",null,null],[11,"clone","","",174,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"clone","","",175,{"inputs":[{"name":"_unwind_context"}],"output":{"name":"_unwind_context"}}],[11,"clone","","",176,{"inputs":[{"name":"_unwind_exception"}],"output":{"name":"_unwind_exception"}}],[0,"virt_mem","kernel","",null,null],[3,"VirtualTree","kernel::virt_mem","",null,null],[11,"new","","",177,{"inputs":[{"name":"virtualtree"}],"output":{"name":"virtualtree"}}],[11,"for_kernel","","",177,{"inputs":[{"name":"virtualtree"}],"output":{"name":"virtualtree"}}],[11,"block_count","","",177,{"inputs":[{"name":"virtualtree"}],"output":{"name":"usize"}}],[11,"alloc","","",177,{"inputs":[{"name":"virtualtree"},{"name":"usize"}],"output":{"name":"result"}}],[11,"reserve","","",177,null],[11,"free","","",177,null],[14,"bitflags!","kernel","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null],[14,"lazy_static!","","",null,null],[14,"lock!","","",null,null],[11,"hash","kernel::arch::keyboard::keys","",178,null],[11,"cmp","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"option"}}],[11,"lt","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bool"}}],[11,"le","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bool"}}],[11,"gt","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bool"}}],[11,"ge","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"bucky"}],"output":{"name":"bucky"}}],[11,"eq","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bool"}}],[11,"fmt","","",178,{"inputs":[{"name":"bucky"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",178,{"inputs":[{"name":"bucky"}],"output":{"name":"bucky"}}],[11,"all","","Returns the set containing all flags.",178,{"inputs":[{"name":"bucky"}],"output":{"name":"bucky"}}],[11,"bits","","Returns the raw value of the flags currently stored.",178,{"inputs":[{"name":"bucky"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",178,{"inputs":[{"name":"bucky"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",178,{"inputs":[{"name":"bucky"},{"name":"u32"}],"output":{"name":"bucky"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",178,{"inputs":[{"name":"bucky"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",178,{"inputs":[{"name":"bucky"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bucky"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bucky"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bucky"}}],[11,"sub","","Returns the set difference of the two sets of flags.",178,{"inputs":[{"name":"bucky"},{"name":"bucky"}],"output":{"name":"bucky"}}],[11,"not","","Returns the complement of this set of flags.",178,{"inputs":[{"name":"bucky"}],"output":{"name":"bucky"}}],[11,"set","","",178,{"inputs":[{"name":"bucky"},{"name":"bucky"},{"name":"bool"}],"output":null}],[11,"pick","kernel::arch::keyboard","",179,{"inputs":[{"name":"key"},{"name":"bucky"}],"output":{"name":"u32"}}],[11,"new","","",180,{"inputs":[{"name":"keyboard"}],"output":{"name":"self"}}],[11,"async_read","","",180,{"inputs":[{"name":"keyboard"}],"output":{"name":"option"}}],[11,"new","kernel::arch::vga","",181,{"inputs":[{"name":"vga"}],"output":{"name":"self"}}],[11,"write","","",181,null],[11,"write","","",181,{"inputs":[{"name":"vga"}],"output":{"name":"option"}}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"Regs"],[3,"Tss"],[3,"DescriptorExtra"],[3,"InterruptDescriptor"],[3,"Dtr"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"PageFlags"],[3,"PageEntry"],[3,"AddressSpace"],[3,"ArchProcess"],[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"],[3,"Console"],[3,"Deferred"],[3,"Struct_Unnamed1"],[3,"Struct_Unnamed2"],[3,"Struct_Unnamed3"],[3,"Struct_Unnamed4"],[3,"Struct_Unnamed5"],[3,"Struct_Unnamed6"],[3,"Struct_Unnamed7"],[3,"Struct_Unnamed8"],[3,"Struct_Unnamed9"],[3,"Struct_Unnamed10"],[3,"Struct_Unnamed11"],[3,"Struct_Unnamed12"],[3,"Struct_Unnamed13"],[3,"Struct_Unnamed14"],[3,"Struct_Unnamed15"],[3,"Union_Unnamed16"],[3,"Struct_Unnamed17"],[3,"Union_Unnamed18"],[3,"Struct_Unnamed19"],[3,"Struct_Unnamed20"],[3,"Struct_Unnamed21"],[3,"Struct_Unnamed22"],[3,"Struct_Unnamed23"],[3,"Struct_Unnamed24"],[3,"Struct_Unnamed25"],[3,"Struct_Unnamed26"],[3,"Struct_Unnamed27"],[3,"Union_Unnamed28"],[3,"Struct_Unnamed29"],[3,"Union_Unnamed30"],[3,"Struct_Unnamed31"],[3,"Struct_Unnamed32"],[3,"Struct_Unnamed33"],[3,"Struct_Unnamed34"],[3,"Union_Unnamed35"],[3,"Struct_Unnamed36"],[3,"Struct_Unnamed37"],[3,"Struct_Unnamed38"],[3,"Struct_Unnamed39"],[3,"Struct_Unnamed40"],[3,"Struct_Unnamed41"],[3,"Struct_Unnamed42"],[3,"FlatMap"],[3,"Pipe"],[8,"Read"],[8,"Write"],[8,"AsyncRead"],[3,"Promise"],[3,"SyscallHandler"],[3,"Writer"],[3,"Struct_multiboot_header"],[3,"Struct_multiboot_aout_symbol_table"],[3,"Struct_multiboot_elf_section_header_table"],[3,"Struct_multiboot_info"],[3,"Union_Unnamed1"],[3,"Struct_multiboot_color"],[3,"Struct_multiboot_mmap_entry"],[3,"Struct_multiboot_mod_list"],[3,"Struct_multiboot_apm_info"],[3,"Once"],[3,"PhysicalBitmap"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[8,"ToString"],[8,"KObj"],[3,"Process"],[8,"Align"],[3,"Singleton"],[3,"DropSingleton"],[3,"BlockedThread"],[4,"_Unwind_Reason_Code"],[3,"_Unwind_Context"],[3,"_Unwind_Exception"],[3,"VirtualTree"],[3,"Bucky"],[3,"Key"],[3,"Keyboard"],[3,"Vga"]]};
initSearch(searchIndex);
