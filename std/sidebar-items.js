initSidebarItems({"macro":[["assert!","Ensure that a boolean expression is `true` at runtime."],["assert_eq!","Asserts that two expressions are equal to each other."],["format!","Use the syntax described in `std::fmt` to create a value of type `String`. See `std::fmt` for more information."],["panic!",""],["try!","Short circuiting evaluation on Err"],["vec!","Creates a `Vec` containing the arguments."],["write!","Use the `format!` syntax to write data into a buffer."],["writeln!","Use the `format!` syntax to write data into a buffer, appending a newline."]],"mod":[["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["char","Character manipulation."],["clone","The `Clone` trait for types that cannot be 'implicitly copied'"],["cmp","Functionality for ordering and comparison."],["collections",""],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["error","Traits for working with Errors."],["f32","The 32-bit floating point type."],["f64","The 64-bit floating point type."],["fmt","Utilities for formatting and printing strings"],["hash","Generic hashing support."],["i16","The 16-bit signed integer type."],["i32","The 32-bit signed integer type."],["i64","The 64-bit signed integer type."],["i8","The 8-bit signed integer type."],["intrinsics","rustc compiler intrinsics."],["io","Traits, helpers, and type definitions for core I/O functionality."],["isize","The pointer-sized signed integer type."],["iter","Composable external iteration"],["marker","Primitive traits and marker types representing basic 'kinds' of types."],["mem","Basic functions for dealing with memory"],["num","Numeric traits and functions for generic mathematics"],["ops","Overloadable operators"],["option","Optional values"],["panicking","Panic support for libcore"],["prelude",""],["ptr","Raw, unsafe pointers, `*const T`, and `*mut T`"],["raw","Contains struct definitions for the layout of compiler built-in types."],["result","Error handling with the `Result` type"],["slice","Slice management and manipulation"],["str","String manipulation"],["string","An owned, growable string that enforces that its contents are valid UTF-8."],["sync",""],["u16","The 16-bit unsigned integer type."],["u32","The 32-bit unsigned integer type."],["u64","The 64-bit unsigned integer type."],["u8","The 8-bit unsigned integer type."],["usize","The pointer-sized unsigned integer type."],["vec","A growable list type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"]]});